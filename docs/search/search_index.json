{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyben Small library for encoding/decoding bencode data. Pyben Enables fast and easy encoding and decoding of bencoded data. Prerequisites Python v3.6+ Installing PyBen To install PyBen, follow these steps: Using pip: pip install pyben Using git: git clone https://github.com/alexpdev/pyben.git Using PyBen The API is intentionally designed to mimic Python's json and pickle modules. >>> import os >>> import pyben >>> file_path = \"path/to/encoded.file\" >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' >>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True One key difference is that the 'load' and 'dump' methods accept as arguments, string paths or path objects as well as open iobuffer. For Example this: >>> with open(file_path, \"wb\") as fd: >>> pyben.dump(decoded, fd) >>> os.path.exists(file_path) ... True >>> with open(file_path, \"rb\") as fd: >>> decoded_file = pyben.load(fd) >>> decoded_file == decoded == data ... True is the same as doing following. >>> pyben.dump(data, file_path) >>> os.path.exists(file_path) ... True >>> decoded_file = pyben.load(file_path) >>> decoded_file == decoded == data ... True The full API includes many other functions and classes as well. See docs for more full API. License This project uses the following license: Apache 2.0","title":"Home"},{"location":"#pyben","text":"Small library for encoding/decoding bencode data. Pyben Enables fast and easy encoding and decoding of bencoded data.","title":"Pyben"},{"location":"#prerequisites","text":"Python v3.6+","title":"Prerequisites"},{"location":"#installing-pyben","text":"To install PyBen, follow these steps: Using pip: pip install pyben Using git: git clone https://github.com/alexpdev/pyben.git","title":"Installing PyBen"},{"location":"#using-pyben","text":"The API is intentionally designed to mimic Python's json and pickle modules. >>> import os >>> import pyben >>> file_path = \"path/to/encoded.file\" >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' >>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True One key difference is that the 'load' and 'dump' methods accept as arguments, string paths or path objects as well as open iobuffer. For Example this: >>> with open(file_path, \"wb\") as fd: >>> pyben.dump(decoded, fd) >>> os.path.exists(file_path) ... True >>> with open(file_path, \"rb\") as fd: >>> decoded_file = pyben.load(fd) >>> decoded_file == decoded == data ... True is the same as doing following. >>> pyben.dump(data, file_path) >>> os.path.exists(file_path) ... True >>> decoded_file = pyben.load(file_path) >>> decoded_file == decoded == data ... True The full API includes many other functions and classes as well. See docs for more full API.","title":"Using PyBen"},{"location":"#license","text":"This project uses the following license: Apache 2.0","title":"License"},{"location":"api/","text":"PyBen API Reference pyben PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent). Modules api classes bencode Classes Bendecoder Benencoder Functions bendecode benencode dump dumps load loads readinto Bendecoder Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder: \"\"\"Decode class contains all decode methods.\"\"\" def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded def _decode(self, bits: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencoded data for decoding. Returns ------- dict The decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = self._decode_int(bits) return match, feed # decode string if chr(bits[0]).isdigit(): num, feed = self._decode_str(bits) return num, feed # decode list and contents if bits.startswith(b\"l\"): lst, feed = self._decode_list(bits) return lst, feed # decode dictionary and contents if bits.startswith(b\"d\"): dic, feed = self._decode_dict(bits) return dic, feed raise DecodeError(bits) def _decode_dict(self, bits: bytes) -> dict: \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : `bytes` `Bytes` of data for decoding. Returns ------- `dict` Dictionary and contents. \"\"\" dct, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = self._decode(bits[feed:]) feed += rest match2, rest = self._decode(bits[feed:]) feed += rest dct[match1] = match2 feed += 1 return dct, feed def _decode_list(self, data: bytes) -> list: \"\"\" Decode list and its contents. Parameters ---------- data : bytes Bencoded data. Returns ------- list decoded list and contents \"\"\" seq, feed = [], 1 while not data[feed:].startswith(b\"e\"): match, rest = self._decode(data[feed:]) seq.append(match) feed += rest feed += 1 return seq, feed @staticmethod def _decode_str(bits: bytes) -> str: \"\"\" Decode string. Parameters ---------- bits : `bytes` Bencoded string. Returns ------- `str` Decoded string. \"\"\" match = re.match(rb\"(\\d+):\", bits) word_size, start = int(match.groups()[0]), match.span()[1] finish = start + word_size word = bits[start:finish] try: word = word.decode(\"utf-8\") except UnicodeDecodeError: pass return word, finish @staticmethod def _decode_int(bits: bytes) -> int: \"\"\" Decode integer type. Parameters ---------- bits : `bytes` Bencoded intiger. Returns ------- `int` Decoded intiger. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end() __init__(data=None) Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data bytes (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None decode(data=None) Decode bencoded data. Parameters: Name Type Description Default data bytes bencoded data for decoding. None Returns: Type Description any the decoded data. Source code in pyben\\classes.py def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded load(item) classmethod Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item str Path containing bencoded data. required Raises: Type Description FilePathError Incorrect path or IOBuffer doesnt exist. Returns: Type Description any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) loads(data) classmethod Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data bytes Bendencoded bytes required Returns: Type Description any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder: \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded def _encode(self, val: bytes): \"\"\" Encode data with bencode protocol. Parameters ---------- val : bytes Bencoded data for decoding. Returns ------- any the decoded data. \"\"\" if isinstance(val, str): return self._encode_str(val) if hasattr(val, \"hex\"): return self._encode_bytes(val) if isinstance(val, int): return self._encode_int(val) if isinstance(val, list): return self._encode_list(val) if isinstance(val, dict): return self._encode_dict(val) if isinstance(val, tuple): return self._encode_list(list(val)) raise EncodeError(val) @staticmethod def _encode_bytes(val: bytes) -> bytes: \"\"\" Bencode encoding bytes as string literal. Parameters ---------- val : bytes data Returns ------- bytes data \"\"\" size = str(len(val)) + \":\" return size.encode(\"utf-8\") + val @staticmethod def _encode_str(txt: str) -> bytes: \"\"\" Decode string. Parameters ---------- txt : str Any string literal. Returns ------- bytes Bencoded string. \"\"\" size = str(len(txt)).encode(\"utf-8\") return size + b\":\" + txt.encode(\"utf-8\") @staticmethod def _encode_int(num: int) -> bytes: \"\"\" Encode intiger. Parameters ---------- num : int Integer for encoding. Returns ------- bytes Bencoded intiger. \"\"\" return b\"i\" + str(num).encode(\"utf-8\") + b\"e\" def _encode_list(self, elems: list) -> bytes: \"\"\" Encode list and its contents. Parameters ---------- elems : list List of content to be encoded. Returns ------- bytes Bencoded data \"\"\" lst = [b\"l\"] for elem in elems: encoded = self._encode(elem) lst.append(encoded) lst.append(b\"e\") bit_lst = b\"\".join(lst) return bit_lst def _encode_dict(self, dic: dict) -> bytes: \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : dict Dictionary of data for encoding. Returns ------- bytes Bencoded data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([self._encode(key), self._encode(val)]) return result + b\"e\" __init__(data=None) Construct the Bencoder class. Parameters: Name Type Description Default data bytes , optional data, by default None None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None dump(data, path) classmethod Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path os . PathLike Where encoded data should be written to.py required Returns: Type Description bool Return True if success.txt Source code in pyben\\classes.py @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True dumps(data) classmethod Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description bytes Encoded data. Source code in pyben\\classes.py @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() encode(val=None) Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any , optional Data for encoding. Defaults to None. None Returns: Type Description bytes encoded data Source code in pyben\\classes.py def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded DecodeError Bases: Exception Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError(Exception): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg) __init__(val=None) Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg) EncodeError Bases: Exception Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError(Exception): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg) __init__(val=None) Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg) FilePathError Bases: Exception Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default obj None Value that cause the exception None Source code in pyben\\exceptions.py class FilePathError(Exception): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- obj : None Value that cause the exception \"\"\" def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg) __init__(obj=None) Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg) bendecode(bits) Decode bencoded data. Parameters: Name Type Description Default bits bytes Bencode encoded data. required Raises: Type Description DecodeError Malformed data. Returns: Type Description tuple Bencode decoded data. Source code in pyben\\bencode.py def bendecode(bits: bytes) -> tuple: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencode encoded data. Raises ------ DecodeError Malformed data. Returns ------- tuple Bencode decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = bendecode_int(bits) return match, feed if chr(bits[0]).isdigit(): match, feed = bendecode_str(bits) return match, feed if bits.startswith(b\"l\"): lst, feed = bendecode_list(bits) return lst, feed if bits.startswith(b\"d\"): dic, feed = bendecode_dict(bits) return dic, feed raise DecodeError(bits) benencode(val) Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Raises: Type Description EncodeError Cannot interpret data. Returns: Type Description bytes Bencoded data. Source code in pyben\\bencode.py def benencode(val) -> bytes: \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ EncodeError Cannot interpret data. Returns ------- bytes Bencoded data. \"\"\" if isinstance(val, str): return bencode_str(val) if isinstance(val, int): return bencode_int(val) if isinstance(val, list): return bencode_list(val) if isinstance(val, dict): return bencode_dict(val) if hasattr(val, \"hex\"): return bencode_bytes(val) if isinstance(val, tuple): return bencode_list(list(val)) raise EncodeError(val) dump(obj, buffer) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer str or BytesIO File of path-like to write the data to. required Source code in pyben\\api.py def dump(obj, buffer): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. \"\"\" encoded = benencode(obj) if not hasattr(buffer, \"write\"): if hasattr(buffer, \"decode\"): # pragma: nocover txt = buffer.decode(\"utf-8\") else: txt = buffer with open(txt, \"wb\") as _fd: _fd.write(encoded) else: buffer.write(encoded) dumps(obj) Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj any Object to be encoded.py. required Returns: Name Type Description bytes Encoded data. Source code in pyben\\api.py def dumps(obj): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : any Object to be encoded.py. Returns ------- bytes : Encoded data. \"\"\" return bytes(benencode(obj)) load(buffer, to_json=False) Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Name Type Description dict (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load(buffer, to_json=False): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- dict : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [None, \"\"]: raise FilePathError(buffer) if hasattr(buffer, \"read\"): decoded, _ = bendecode(buffer.read()) else: if hasattr(buffer, \"decode\"): # pragma: nocover path = buffer.decode(\"utf-8\") else: path = buffer try: with open(path, \"rb\") as _fd: decoded, _ = bendecode(_fd.read()) except (FileNotFoundError, IsADirectoryError, PermissionError) as err: raise FilePathError(buffer) from err if to_json: decoded = _to_json(decoded) return decoded loadinto(buffer, lst) Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Name Type Description list the list containing the output. Source code in pyben\\api.py def loadinto(buffer, lst): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try: output = load(buffer) lst.append(output) except FilePathError as err: lst.append(False) raise FilePathError from err return lst loads(encoded, to_json=False) Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded bytes Bencoded data. required to_json bool Convert to json serializable if true otherwise leave it alone. False Returns: Name Type Description dict (any), Decoded data. Source code in pyben\\api.py def loads(encoded, to_json=False): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : bytes Bencoded data. to_json : bool Convert to json serializable if true otherwise leave it alone. Returns ------- dict : (any), Decoded data. \"\"\" decoded, _ = bendecode(encoded) if to_json: decoded = _to_json(decoded) return decoded show(inp) Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Name Type Description bool Returns True if completed successfully. Source code in pyben\\api.py def show(inp): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance(inp, dict): meta = _to_json(inp) elif hasattr(inp, \"read\"): meta = load(inp, to_json=True) elif isinstance(inp, (str, os.PathLike)): try: meta = load(inp, to_json=True) except FilePathError: meta = inp elif isinstance(inp, (bytes, bytearray)): meta = loads(inp, to_json=True) json.dump(meta, sys.stdout, indent=4) return True pyben.api Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads tojson Examples: Usage Examples Encode inline code: >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) Decode inline code: >>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} dump(obj, buffer) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer str or BytesIO File of path-like to write the data to. required Source code in pyben\\api.py def dump(obj, buffer): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. \"\"\" encoded = benencode(obj) if not hasattr(buffer, \"write\"): if hasattr(buffer, \"decode\"): # pragma: nocover txt = buffer.decode(\"utf-8\") else: txt = buffer with open(txt, \"wb\") as _fd: _fd.write(encoded) else: buffer.write(encoded) dumps(obj) Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj any Object to be encoded.py. required Returns: Name Type Description bytes Encoded data. Source code in pyben\\api.py def dumps(obj): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : any Object to be encoded.py. Returns ------- bytes : Encoded data. \"\"\" return bytes(benencode(obj)) load(buffer, to_json=False) Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Name Type Description dict (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load(buffer, to_json=False): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- dict : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [None, \"\"]: raise FilePathError(buffer) if hasattr(buffer, \"read\"): decoded, _ = bendecode(buffer.read()) else: if hasattr(buffer, \"decode\"): # pragma: nocover path = buffer.decode(\"utf-8\") else: path = buffer try: with open(path, \"rb\") as _fd: decoded, _ = bendecode(_fd.read()) except (FileNotFoundError, IsADirectoryError, PermissionError) as err: raise FilePathError(buffer) from err if to_json: decoded = _to_json(decoded) return decoded loadinto(buffer, lst) Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Name Type Description list the list containing the output. Source code in pyben\\api.py def loadinto(buffer, lst): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try: output = load(buffer) lst.append(output) except FilePathError as err: lst.append(False) raise FilePathError from err return lst loads(encoded, to_json=False) Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded bytes Bencoded data. required to_json bool Convert to json serializable if true otherwise leave it alone. False Returns: Name Type Description dict (any), Decoded data. Source code in pyben\\api.py def loads(encoded, to_json=False): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : bytes Bencoded data. to_json : bool Convert to json serializable if true otherwise leave it alone. Returns ------- dict : (any), Decoded data. \"\"\" decoded, _ = bendecode(encoded) if to_json: decoded = _to_json(decoded) return decoded show(inp) Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Name Type Description bool Returns True if completed successfully. Source code in pyben\\api.py def show(inp): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance(inp, dict): meta = _to_json(inp) elif hasattr(inp, \"read\"): meta = load(inp, to_json=True) elif isinstance(inp, (str, os.PathLike)): try: meta = load(inp, to_json=True) except FilePathError: meta = inp elif isinstance(inp, (bytes, bytearray)): meta = loads(inp, to_json=True) json.dump(meta, sys.stdout, indent=4) return True pyben.classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Bendecoder Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder: \"\"\"Decode class contains all decode methods.\"\"\" def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded def _decode(self, bits: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencoded data for decoding. Returns ------- dict The decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = self._decode_int(bits) return match, feed # decode string if chr(bits[0]).isdigit(): num, feed = self._decode_str(bits) return num, feed # decode list and contents if bits.startswith(b\"l\"): lst, feed = self._decode_list(bits) return lst, feed # decode dictionary and contents if bits.startswith(b\"d\"): dic, feed = self._decode_dict(bits) return dic, feed raise DecodeError(bits) def _decode_dict(self, bits: bytes) -> dict: \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : `bytes` `Bytes` of data for decoding. Returns ------- `dict` Dictionary and contents. \"\"\" dct, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = self._decode(bits[feed:]) feed += rest match2, rest = self._decode(bits[feed:]) feed += rest dct[match1] = match2 feed += 1 return dct, feed def _decode_list(self, data: bytes) -> list: \"\"\" Decode list and its contents. Parameters ---------- data : bytes Bencoded data. Returns ------- list decoded list and contents \"\"\" seq, feed = [], 1 while not data[feed:].startswith(b\"e\"): match, rest = self._decode(data[feed:]) seq.append(match) feed += rest feed += 1 return seq, feed @staticmethod def _decode_str(bits: bytes) -> str: \"\"\" Decode string. Parameters ---------- bits : `bytes` Bencoded string. Returns ------- `str` Decoded string. \"\"\" match = re.match(rb\"(\\d+):\", bits) word_size, start = int(match.groups()[0]), match.span()[1] finish = start + word_size word = bits[start:finish] try: word = word.decode(\"utf-8\") except UnicodeDecodeError: pass return word, finish @staticmethod def _decode_int(bits: bytes) -> int: \"\"\" Decode integer type. Parameters ---------- bits : `bytes` Bencoded intiger. Returns ------- `int` Decoded intiger. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end() __init__(data=None) Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data bytes (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None decode(data=None) Decode bencoded data. Parameters: Name Type Description Default data bytes bencoded data for decoding. None Returns: Type Description any the decoded data. Source code in pyben\\classes.py def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded load(item) classmethod Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item str Path containing bencoded data. required Raises: Type Description FilePathError Incorrect path or IOBuffer doesnt exist. Returns: Type Description any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) loads(data) classmethod Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data bytes Bendencoded bytes required Returns: Type Description any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder: \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded def _encode(self, val: bytes): \"\"\" Encode data with bencode protocol. Parameters ---------- val : bytes Bencoded data for decoding. Returns ------- any the decoded data. \"\"\" if isinstance(val, str): return self._encode_str(val) if hasattr(val, \"hex\"): return self._encode_bytes(val) if isinstance(val, int): return self._encode_int(val) if isinstance(val, list): return self._encode_list(val) if isinstance(val, dict): return self._encode_dict(val) if isinstance(val, tuple): return self._encode_list(list(val)) raise EncodeError(val) @staticmethod def _encode_bytes(val: bytes) -> bytes: \"\"\" Bencode encoding bytes as string literal. Parameters ---------- val : bytes data Returns ------- bytes data \"\"\" size = str(len(val)) + \":\" return size.encode(\"utf-8\") + val @staticmethod def _encode_str(txt: str) -> bytes: \"\"\" Decode string. Parameters ---------- txt : str Any string literal. Returns ------- bytes Bencoded string. \"\"\" size = str(len(txt)).encode(\"utf-8\") return size + b\":\" + txt.encode(\"utf-8\") @staticmethod def _encode_int(num: int) -> bytes: \"\"\" Encode intiger. Parameters ---------- num : int Integer for encoding. Returns ------- bytes Bencoded intiger. \"\"\" return b\"i\" + str(num).encode(\"utf-8\") + b\"e\" def _encode_list(self, elems: list) -> bytes: \"\"\" Encode list and its contents. Parameters ---------- elems : list List of content to be encoded. Returns ------- bytes Bencoded data \"\"\" lst = [b\"l\"] for elem in elems: encoded = self._encode(elem) lst.append(encoded) lst.append(b\"e\") bit_lst = b\"\".join(lst) return bit_lst def _encode_dict(self, dic: dict) -> bytes: \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : dict Dictionary of data for encoding. Returns ------- bytes Bencoded data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([self._encode(key), self._encode(val)]) return result + b\"e\" __init__(data=None) Construct the Bencoder class. Parameters: Name Type Description Default data bytes , optional data, by default None None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None dump(data, path) classmethod Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path os . PathLike Where encoded data should be written to.py required Returns: Type Description bool Return True if success.txt Source code in pyben\\classes.py @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True dumps(data) classmethod Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description bytes Encoded data. Source code in pyben\\classes.py @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() encode(val=None) Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any , optional Data for encoding. Defaults to None. None Returns: Type Description bytes encoded data Source code in pyben\\classes.py def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded pyben.bencode API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str bencode_bytes(bits) Encode bytes. Parameters: Name Type Description Default bits bytes Bytes treated as a byte-string literal. required Returns: Type Description bytes Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes(bits: bytes) -> bytes: \"\"\" Encode bytes. Parameters ---------- bits : bytes Bytes treated as a byte-string literal. Returns ------- bytes Bencode encoded byte string literal. \"\"\" size = str(len(bits)) + \":\" return size.encode(\"utf-8\") + bits bencode_dict(dic) Encode dictionary and contents. Parameters: Name Type Description Default dic dict Any dictionary containing items that can be bencoded. required Returns: Name Type Description bytes bytes Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict(dic: dict) -> bytes: \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- bytes : Bencoded key, value pairs of data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([benencode(key), benencode(val)]) return result + b\"e\" bencode_int(i) Encode integer type. Parameters: Name Type Description Default i int Number that needs encoding. required Returns: Type Description bytes Bencoded Integer. Source code in pyben\\bencode.py def bencode_int(i: int) -> bytes: \"\"\" Encode integer type. Parameters ---------- i : int Number that needs encoding. Returns ------- bytes Bencoded Integer. \"\"\" return (\"i\" + str(i) + \"e\").encode(\"utf-8\") bencode_list(elems) Encode list and contents. Parameters: Name Type Description Default elems list List of items for bencoding. required Returns: Type Description bytes Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list(elems: list) -> bytes: \"\"\" Encode list and contents. Parameters ---------- elems : list List of items for bencoding. Returns ------- bytes Bencoded list and contents. \"\"\" arr = bytearray(\"l\", encoding=\"utf-8\") for elem in elems: encoded = benencode(elem) arr.extend(encoded) arr.extend(b\"e\") return arr bencode_str(txt) Encode string literals. Parameters: Name Type Description Default txt str Any text string. required Returns: Type Description bytes Bencoded string literal. Source code in pyben\\bencode.py def bencode_str(txt: str) -> bytes: \"\"\" Encode string literals. Parameters ---------- txt : str Any text string. Returns ------- bytes Bencoded string literal. \"\"\" text = txt.encode(\"utf-8\") size = str(len(text)) + \":\" return size.encode(\"utf-8\") + text bendecode(bits) Decode bencoded data. Parameters: Name Type Description Default bits bytes Bencode encoded data. required Raises: Type Description DecodeError Malformed data. Returns: Type Description tuple Bencode decoded data. Source code in pyben\\bencode.py def bendecode(bits: bytes) -> tuple: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencode encoded data. Raises ------ DecodeError Malformed data. Returns ------- tuple Bencode decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = bendecode_int(bits) return match, feed if chr(bits[0]).isdigit(): match, feed = bendecode_str(bits) return match, feed if bits.startswith(b\"l\"): lst, feed = bendecode_list(bits) return lst, feed if bits.startswith(b\"d\"): dic, feed = bendecode_dict(bits) return dic, feed raise DecodeError(bits) bendecode_dict(bits) Decode dictionary and it's contents. Parameters: Name Type Description Default bits bytes Bencoded dictionary. required Returns: Type Description tuple Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict(bits: bytes) -> tuple: \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : bytes Bencoded dictionary. Returns ------- tuple Decoded dictionary and contents \"\"\" dic, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = bendecode(bits[feed:]) feed += rest match2, rest = bendecode(bits[feed:]) feed += rest dic[match1] = match2 feed += 1 return dic, feed bendecode_int(bits) Decode digits. Parameters: Name Type Description Default bits bytes Bencoded intiger bytes required Returns: Name Type Description int int Decoded int value. Source code in pyben\\bencode.py def bendecode_int(bits: bytes) -> int: \"\"\" Decode digits. Parameters ---------- bits : bytes Bencoded intiger bytes Returns ------- int : Decoded int value. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end() bendecode_list(bits) Decode list and list contents. Parameters: Name Type Description Default bits bytes Bencoded list. required Returns: Type Description tuple Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list(bits: bytes) -> tuple: \"\"\" Decode list and list contents. Parameters ---------- bits : bytes Bencoded list. Returns ------- tuple Bencode decoded list and contents. \"\"\" lst, feed = [], 1 while not bits[feed:].startswith(b\"e\"): match, rest = bendecode(bits[feed:]) lst.append(match) feed += rest feed += 1 return lst, feed bendecode_str(units) Bendecode string types. Parameters: Name Type Description Default units bytes Bencoded string. required Returns: Type Description str Decoded data string. Source code in pyben\\bencode.py def bendecode_str(units: bytes) -> str: \"\"\" Bendecode string types. Parameters ---------- units : bytes Bencoded string. Returns ------- str Decoded data string. \"\"\" match = re.match(rb\"(\\d+):\", units) word_len, start = int(match.groups()[0]), match.span()[1] end = start + word_len text = units[start:end] try: text = text.decode(\"utf-8\") except UnicodeDecodeError: pass return text, end benencode(val) Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Raises: Type Description EncodeError Cannot interpret data. Returns: Type Description bytes Bencoded data. Source code in pyben\\bencode.py def benencode(val) -> bytes: \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ EncodeError Cannot interpret data. Returns ------- bytes Bencoded data. \"\"\" if isinstance(val, str): return bencode_str(val) if isinstance(val, int): return bencode_int(val) if isinstance(val, list): return bencode_list(val) if isinstance(val, dict): return bencode_dict(val) if hasattr(val, \"hex\"): return bencode_bytes(val) if isinstance(val, tuple): return bencode_list(list(val)) raise EncodeError(val) pyben.exceptions Exceptions used throughout the PyBen Package/Library. DecodeError Bases: Exception Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError(Exception): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg) __init__(val=None) Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg) EncodeError Bases: Exception Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError(Exception): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg) __init__(val=None) Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg) FilePathError Bases: Exception Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default obj None Value that cause the exception None Source code in pyben\\exceptions.py class FilePathError(Exception): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- obj : None Value that cause the exception \"\"\" def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg) __init__(obj=None) Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg)","title":"API"},{"location":"api/#pyben-api-reference","text":"","title":"PyBen API Reference"},{"location":"api/#pyben","text":"PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent).","title":"pyben"},{"location":"api/#pyben--modules","text":"api classes bencode","title":"Modules"},{"location":"api/#pyben--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben--functions","text":"bendecode benencode dump dumps load loads readinto","title":"Functions"},{"location":"api/#pyben.Bendecoder","text":"Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder: \"\"\"Decode class contains all decode methods.\"\"\" def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded def _decode(self, bits: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencoded data for decoding. Returns ------- dict The decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = self._decode_int(bits) return match, feed # decode string if chr(bits[0]).isdigit(): num, feed = self._decode_str(bits) return num, feed # decode list and contents if bits.startswith(b\"l\"): lst, feed = self._decode_list(bits) return lst, feed # decode dictionary and contents if bits.startswith(b\"d\"): dic, feed = self._decode_dict(bits) return dic, feed raise DecodeError(bits) def _decode_dict(self, bits: bytes) -> dict: \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : `bytes` `Bytes` of data for decoding. Returns ------- `dict` Dictionary and contents. \"\"\" dct, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = self._decode(bits[feed:]) feed += rest match2, rest = self._decode(bits[feed:]) feed += rest dct[match1] = match2 feed += 1 return dct, feed def _decode_list(self, data: bytes) -> list: \"\"\" Decode list and its contents. Parameters ---------- data : bytes Bencoded data. Returns ------- list decoded list and contents \"\"\" seq, feed = [], 1 while not data[feed:].startswith(b\"e\"): match, rest = self._decode(data[feed:]) seq.append(match) feed += rest feed += 1 return seq, feed @staticmethod def _decode_str(bits: bytes) -> str: \"\"\" Decode string. Parameters ---------- bits : `bytes` Bencoded string. Returns ------- `str` Decoded string. \"\"\" match = re.match(rb\"(\\d+):\", bits) word_size, start = int(match.groups()[0]), match.span()[1] finish = start + word_size word = bits[start:finish] try: word = word.decode(\"utf-8\") except UnicodeDecodeError: pass return word, finish @staticmethod def _decode_int(bits: bytes) -> int: \"\"\" Decode integer type. Parameters ---------- bits : `bytes` Bencoded intiger. Returns ------- `int` Decoded intiger. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end()","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data bytes (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data. Parameters: Name Type Description Default data bytes bencoded data for decoding. None Returns: Type Description any the decoded data. Source code in pyben\\classes.py def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item str Path containing bencoded data. required Raises: Type Description FilePathError Incorrect path or IOBuffer doesnt exist. Returns: Type Description any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data)","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data bytes Bendencoded bytes required Returns: Type Description any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data)","title":"loads()"},{"location":"api/#pyben.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder: \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded def _encode(self, val: bytes): \"\"\" Encode data with bencode protocol. Parameters ---------- val : bytes Bencoded data for decoding. Returns ------- any the decoded data. \"\"\" if isinstance(val, str): return self._encode_str(val) if hasattr(val, \"hex\"): return self._encode_bytes(val) if isinstance(val, int): return self._encode_int(val) if isinstance(val, list): return self._encode_list(val) if isinstance(val, dict): return self._encode_dict(val) if isinstance(val, tuple): return self._encode_list(list(val)) raise EncodeError(val) @staticmethod def _encode_bytes(val: bytes) -> bytes: \"\"\" Bencode encoding bytes as string literal. Parameters ---------- val : bytes data Returns ------- bytes data \"\"\" size = str(len(val)) + \":\" return size.encode(\"utf-8\") + val @staticmethod def _encode_str(txt: str) -> bytes: \"\"\" Decode string. Parameters ---------- txt : str Any string literal. Returns ------- bytes Bencoded string. \"\"\" size = str(len(txt)).encode(\"utf-8\") return size + b\":\" + txt.encode(\"utf-8\") @staticmethod def _encode_int(num: int) -> bytes: \"\"\" Encode intiger. Parameters ---------- num : int Integer for encoding. Returns ------- bytes Bencoded intiger. \"\"\" return b\"i\" + str(num).encode(\"utf-8\") + b\"e\" def _encode_list(self, elems: list) -> bytes: \"\"\" Encode list and its contents. Parameters ---------- elems : list List of content to be encoded. Returns ------- bytes Bencoded data \"\"\" lst = [b\"l\"] for elem in elems: encoded = self._encode(elem) lst.append(encoded) lst.append(b\"e\") bit_lst = b\"\".join(lst) return bit_lst def _encode_dict(self, dic: dict) -> bytes: \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : dict Dictionary of data for encoding. Returns ------- bytes Bencoded data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([self._encode(key), self._encode(val)]) return result + b\"e\"","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Construct the Bencoder class. Parameters: Name Type Description Default data bytes , optional data, by default None None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path os . PathLike Where encoded data should be written to.py required Returns: Type Description bool Return True if success.txt Source code in pyben\\classes.py @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description bytes Encoded data. Source code in pyben\\classes.py @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode()","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any , optional Data for encoding. Defaults to None. None Returns: Type Description bytes encoded data Source code in pyben\\classes.py def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded","title":"encode()"},{"location":"api/#pyben.DecodeError","text":"Bases: Exception Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError(Exception): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg)","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg)","title":"__init__()"},{"location":"api/#pyben.EncodeError","text":"Bases: Exception Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError(Exception): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg)","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg)","title":"__init__()"},{"location":"api/#pyben.FilePathError","text":"Bases: Exception Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default obj None Value that cause the exception None Source code in pyben\\exceptions.py class FilePathError(Exception): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- obj : None Value that cause the exception \"\"\" def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg)","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg)","title":"__init__()"},{"location":"api/#pyben.bendecode","text":"Decode bencoded data. Parameters: Name Type Description Default bits bytes Bencode encoded data. required Raises: Type Description DecodeError Malformed data. Returns: Type Description tuple Bencode decoded data. Source code in pyben\\bencode.py def bendecode(bits: bytes) -> tuple: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencode encoded data. Raises ------ DecodeError Malformed data. Returns ------- tuple Bencode decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = bendecode_int(bits) return match, feed if chr(bits[0]).isdigit(): match, feed = bendecode_str(bits) return match, feed if bits.startswith(b\"l\"): lst, feed = bendecode_list(bits) return lst, feed if bits.startswith(b\"d\"): dic, feed = bendecode_dict(bits) return dic, feed raise DecodeError(bits)","title":"bendecode()"},{"location":"api/#pyben.benencode","text":"Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Raises: Type Description EncodeError Cannot interpret data. Returns: Type Description bytes Bencoded data. Source code in pyben\\bencode.py def benencode(val) -> bytes: \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ EncodeError Cannot interpret data. Returns ------- bytes Bencoded data. \"\"\" if isinstance(val, str): return bencode_str(val) if isinstance(val, int): return bencode_int(val) if isinstance(val, list): return bencode_list(val) if isinstance(val, dict): return bencode_dict(val) if hasattr(val, \"hex\"): return bencode_bytes(val) if isinstance(val, tuple): return bencode_list(list(val)) raise EncodeError(val)","title":"benencode()"},{"location":"api/#pyben.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer str or BytesIO File of path-like to write the data to. required Source code in pyben\\api.py def dump(obj, buffer): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. \"\"\" encoded = benencode(obj) if not hasattr(buffer, \"write\"): if hasattr(buffer, \"decode\"): # pragma: nocover txt = buffer.decode(\"utf-8\") else: txt = buffer with open(txt, \"wb\") as _fd: _fd.write(encoded) else: buffer.write(encoded)","title":"dump()"},{"location":"api/#pyben.dumps","text":"Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj any Object to be encoded.py. required Returns: Name Type Description bytes Encoded data. Source code in pyben\\api.py def dumps(obj): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : any Object to be encoded.py. Returns ------- bytes : Encoded data. \"\"\" return bytes(benencode(obj))","title":"dumps()"},{"location":"api/#pyben.load","text":"Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Name Type Description dict (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load(buffer, to_json=False): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- dict : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [None, \"\"]: raise FilePathError(buffer) if hasattr(buffer, \"read\"): decoded, _ = bendecode(buffer.read()) else: if hasattr(buffer, \"decode\"): # pragma: nocover path = buffer.decode(\"utf-8\") else: path = buffer try: with open(path, \"rb\") as _fd: decoded, _ = bendecode(_fd.read()) except (FileNotFoundError, IsADirectoryError, PermissionError) as err: raise FilePathError(buffer) from err if to_json: decoded = _to_json(decoded) return decoded","title":"load()"},{"location":"api/#pyben.loadinto","text":"Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Name Type Description list the list containing the output. Source code in pyben\\api.py def loadinto(buffer, lst): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try: output = load(buffer) lst.append(output) except FilePathError as err: lst.append(False) raise FilePathError from err return lst","title":"loadinto()"},{"location":"api/#pyben.loads","text":"Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded bytes Bencoded data. required to_json bool Convert to json serializable if true otherwise leave it alone. False Returns: Name Type Description dict (any), Decoded data. Source code in pyben\\api.py def loads(encoded, to_json=False): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : bytes Bencoded data. to_json : bool Convert to json serializable if true otherwise leave it alone. Returns ------- dict : (any), Decoded data. \"\"\" decoded, _ = bendecode(encoded) if to_json: decoded = _to_json(decoded) return decoded","title":"loads()"},{"location":"api/#pyben.show","text":"Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Name Type Description bool Returns True if completed successfully. Source code in pyben\\api.py def show(inp): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance(inp, dict): meta = _to_json(inp) elif hasattr(inp, \"read\"): meta = load(inp, to_json=True) elif isinstance(inp, (str, os.PathLike)): try: meta = load(inp, to_json=True) except FilePathError: meta = inp elif isinstance(inp, (bytes, bytearray)): meta = loads(inp, to_json=True) json.dump(meta, sys.stdout, indent=4) return True","title":"show()"},{"location":"api/#pyben.api","text":"","title":"api"},{"location":"api/#pyben.api--bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#pyben.api--functions","text":"dump dumps load loads tojson Examples:","title":"Functions"},{"location":"api/#pyben.api--usage-examples","text":"","title":"Usage Examples"},{"location":"api/#pyben.api--encode-inline-code","text":">>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#pyben.api--encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd)","title":"Encode to file:"},{"location":"api/#pyben.api--decode-inline-code","text":">>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]}","title":"Decode inline code:"},{"location":"api/#pyben.api--decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]}","title":"Decode from file:"},{"location":"api/#pyben.api.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer str or BytesIO File of path-like to write the data to. required Source code in pyben\\api.py def dump(obj, buffer): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. \"\"\" encoded = benencode(obj) if not hasattr(buffer, \"write\"): if hasattr(buffer, \"decode\"): # pragma: nocover txt = buffer.decode(\"utf-8\") else: txt = buffer with open(txt, \"wb\") as _fd: _fd.write(encoded) else: buffer.write(encoded)","title":"dump()"},{"location":"api/#pyben.api.dumps","text":"Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj any Object to be encoded.py. required Returns: Name Type Description bytes Encoded data. Source code in pyben\\api.py def dumps(obj): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : any Object to be encoded.py. Returns ------- bytes : Encoded data. \"\"\" return bytes(benencode(obj))","title":"dumps()"},{"location":"api/#pyben.api.load","text":"Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Name Type Description dict (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load(buffer, to_json=False): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- dict : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [None, \"\"]: raise FilePathError(buffer) if hasattr(buffer, \"read\"): decoded, _ = bendecode(buffer.read()) else: if hasattr(buffer, \"decode\"): # pragma: nocover path = buffer.decode(\"utf-8\") else: path = buffer try: with open(path, \"rb\") as _fd: decoded, _ = bendecode(_fd.read()) except (FileNotFoundError, IsADirectoryError, PermissionError) as err: raise FilePathError(buffer) from err if to_json: decoded = _to_json(decoded) return decoded","title":"load()"},{"location":"api/#pyben.api.loadinto","text":"Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Name Type Description list the list containing the output. Source code in pyben\\api.py def loadinto(buffer, lst): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try: output = load(buffer) lst.append(output) except FilePathError as err: lst.append(False) raise FilePathError from err return lst","title":"loadinto()"},{"location":"api/#pyben.api.loads","text":"Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded bytes Bencoded data. required to_json bool Convert to json serializable if true otherwise leave it alone. False Returns: Name Type Description dict (any), Decoded data. Source code in pyben\\api.py def loads(encoded, to_json=False): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : bytes Bencoded data. to_json : bool Convert to json serializable if true otherwise leave it alone. Returns ------- dict : (any), Decoded data. \"\"\" decoded, _ = bendecode(encoded) if to_json: decoded = _to_json(decoded) return decoded","title":"loads()"},{"location":"api/#pyben.api.show","text":"Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Name Type Description bool Returns True if completed successfully. Source code in pyben\\api.py def show(inp): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance(inp, dict): meta = _to_json(inp) elif hasattr(inp, \"read\"): meta = load(inp, to_json=True) elif isinstance(inp, (str, os.PathLike)): try: meta = load(inp, to_json=True) except FilePathError: meta = inp elif isinstance(inp, (bytes, bytearray)): meta = loads(inp, to_json=True) json.dump(meta, sys.stdout, indent=4) return True","title":"show()"},{"location":"api/#pyben.classes","text":"OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"classes"},{"location":"api/#pyben.classes--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben.classes.Bendecoder","text":"Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder: \"\"\"Decode class contains all decode methods.\"\"\" def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data) @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data) def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded def _decode(self, bits: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencoded data for decoding. Returns ------- dict The decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = self._decode_int(bits) return match, feed # decode string if chr(bits[0]).isdigit(): num, feed = self._decode_str(bits) return num, feed # decode list and contents if bits.startswith(b\"l\"): lst, feed = self._decode_list(bits) return lst, feed # decode dictionary and contents if bits.startswith(b\"d\"): dic, feed = self._decode_dict(bits) return dic, feed raise DecodeError(bits) def _decode_dict(self, bits: bytes) -> dict: \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : `bytes` `Bytes` of data for decoding. Returns ------- `dict` Dictionary and contents. \"\"\" dct, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = self._decode(bits[feed:]) feed += rest match2, rest = self._decode(bits[feed:]) feed += rest dct[match1] = match2 feed += 1 return dct, feed def _decode_list(self, data: bytes) -> list: \"\"\" Decode list and its contents. Parameters ---------- data : bytes Bencoded data. Returns ------- list decoded list and contents \"\"\" seq, feed = [], 1 while not data[feed:].startswith(b\"e\"): match, rest = self._decode(data[feed:]) seq.append(match) feed += rest feed += 1 return seq, feed @staticmethod def _decode_str(bits: bytes) -> str: \"\"\" Decode string. Parameters ---------- bits : `bytes` Bencoded string. Returns ------- `str` Decoded string. \"\"\" match = re.match(rb\"(\\d+):\", bits) word_size, start = int(match.groups()[0]), match.span()[1] finish = start + word_size word = bits[start:finish] try: word = word.decode(\"utf-8\") except UnicodeDecodeError: pass return word, finish @staticmethod def _decode_int(bits: bytes) -> int: \"\"\" Decode integer type. Parameters ---------- bits : `bytes` Bencoded intiger. Returns ------- `int` Decoded intiger. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end()","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data bytes (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : bytes (Optional) (default=None) Target data for decoding. \"\"\" self.data = data self.decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data. Parameters: Name Type Description Default data bytes bencoded data for decoding. None Returns: Type Description any the decoded data. Source code in pyben\\classes.py def decode(self, data: bytes = None) -> dict: \"\"\" Decode bencoded data. Parameters ---------- data : bytes bencoded data for decoding. Returns ------- any the decoded data. \"\"\" data = self.data if not data else data self.decoded, _ = self._decode(bits=data) return self.decoded","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item str Path containing bencoded data. required Raises: Type Description FilePathError Incorrect path or IOBuffer doesnt exist. Returns: Type Description any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load(cls, item: str) -> dict: \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : str Path containing bencoded data. Raises ------ FilePathError Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls() if hasattr(item, \"read\"): data = item.read() elif os.path.exists(item) and os.path.isfile(item): with open(item, \"rb\") as _fd: data = _fd.read() return decoder.decode(data)","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data bytes Bendencoded bytes required Returns: Type Description any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads(cls, data: bytes) -> dict: \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : bytes Bendencoded bytes Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls() return decoder.decode(data)","title":"loads()"},{"location":"api/#pyben.classes.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder: \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode() def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded def _encode(self, val: bytes): \"\"\" Encode data with bencode protocol. Parameters ---------- val : bytes Bencoded data for decoding. Returns ------- any the decoded data. \"\"\" if isinstance(val, str): return self._encode_str(val) if hasattr(val, \"hex\"): return self._encode_bytes(val) if isinstance(val, int): return self._encode_int(val) if isinstance(val, list): return self._encode_list(val) if isinstance(val, dict): return self._encode_dict(val) if isinstance(val, tuple): return self._encode_list(list(val)) raise EncodeError(val) @staticmethod def _encode_bytes(val: bytes) -> bytes: \"\"\" Bencode encoding bytes as string literal. Parameters ---------- val : bytes data Returns ------- bytes data \"\"\" size = str(len(val)) + \":\" return size.encode(\"utf-8\") + val @staticmethod def _encode_str(txt: str) -> bytes: \"\"\" Decode string. Parameters ---------- txt : str Any string literal. Returns ------- bytes Bencoded string. \"\"\" size = str(len(txt)).encode(\"utf-8\") return size + b\":\" + txt.encode(\"utf-8\") @staticmethod def _encode_int(num: int) -> bytes: \"\"\" Encode intiger. Parameters ---------- num : int Integer for encoding. Returns ------- bytes Bencoded intiger. \"\"\" return b\"i\" + str(num).encode(\"utf-8\") + b\"e\" def _encode_list(self, elems: list) -> bytes: \"\"\" Encode list and its contents. Parameters ---------- elems : list List of content to be encoded. Returns ------- bytes Bencoded data \"\"\" lst = [b\"l\"] for elem in elems: encoded = self._encode(elem) lst.append(encoded) lst.append(b\"e\") bit_lst = b\"\".join(lst) return bit_lst def _encode_dict(self, dic: dict) -> bytes: \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : dict Dictionary of data for encoding. Returns ------- bytes Bencoded data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([self._encode(key), self._encode(val)]) return result + b\"e\"","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Construct the Bencoder class. Parameters: Name Type Description Default data bytes , optional data, by default None None Source code in pyben\\classes.py def __init__(self, data: bytes = None): \"\"\" Construct the Bencoder class. Parameters ---------- data : bytes, optional data, by default None \"\"\" self.data = data self.encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path os . PathLike Where encoded data should be written to.py required Returns: Type Description bool Return True if success.txt Source code in pyben\\classes.py @classmethod def dump(cls, data: bytes, path: os.PathLike) -> bool: \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : os.PathLike Where encoded data should be written to.py Returns ------- bool Return True if success.txt \"\"\" encoded = cls(data).encode() if hasattr(path, \"write\"): path.write(encoded) else: with open(path, \"wb\") as _fd: _fd.write(encoded) return True","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description bytes Encoded data. Source code in pyben\\classes.py @classmethod def dumps(cls, data) -> bytes: \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- bytes Encoded data. \"\"\" return cls(data).encode()","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any , optional Data for encoding. Defaults to None. None Returns: Type Description bytes encoded data Source code in pyben\\classes.py def encode(self, val=None) -> bytes: \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- bytes encoded data \"\"\" if val is None: val = self.data self.encoded = self._encode(val) return self.encoded","title":"encode()"},{"location":"api/#pyben.bencode","text":"API helper functions for decoding and encoding data with bencode format.","title":"bencode"},{"location":"api/#pyben.bencode--functions","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str","title":"Functions"},{"location":"api/#pyben.bencode.bencode_bytes","text":"Encode bytes. Parameters: Name Type Description Default bits bytes Bytes treated as a byte-string literal. required Returns: Type Description bytes Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes(bits: bytes) -> bytes: \"\"\" Encode bytes. Parameters ---------- bits : bytes Bytes treated as a byte-string literal. Returns ------- bytes Bencode encoded byte string literal. \"\"\" size = str(len(bits)) + \":\" return size.encode(\"utf-8\") + bits","title":"bencode_bytes()"},{"location":"api/#pyben.bencode.bencode_dict","text":"Encode dictionary and contents. Parameters: Name Type Description Default dic dict Any dictionary containing items that can be bencoded. required Returns: Name Type Description bytes bytes Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict(dic: dict) -> bytes: \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- bytes : Bencoded key, value pairs of data. \"\"\" result = b\"d\" for key, val in dic.items(): result += b\"\".join([benencode(key), benencode(val)]) return result + b\"e\"","title":"bencode_dict()"},{"location":"api/#pyben.bencode.bencode_int","text":"Encode integer type. Parameters: Name Type Description Default i int Number that needs encoding. required Returns: Type Description bytes Bencoded Integer. Source code in pyben\\bencode.py def bencode_int(i: int) -> bytes: \"\"\" Encode integer type. Parameters ---------- i : int Number that needs encoding. Returns ------- bytes Bencoded Integer. \"\"\" return (\"i\" + str(i) + \"e\").encode(\"utf-8\")","title":"bencode_int()"},{"location":"api/#pyben.bencode.bencode_list","text":"Encode list and contents. Parameters: Name Type Description Default elems list List of items for bencoding. required Returns: Type Description bytes Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list(elems: list) -> bytes: \"\"\" Encode list and contents. Parameters ---------- elems : list List of items for bencoding. Returns ------- bytes Bencoded list and contents. \"\"\" arr = bytearray(\"l\", encoding=\"utf-8\") for elem in elems: encoded = benencode(elem) arr.extend(encoded) arr.extend(b\"e\") return arr","title":"bencode_list()"},{"location":"api/#pyben.bencode.bencode_str","text":"Encode string literals. Parameters: Name Type Description Default txt str Any text string. required Returns: Type Description bytes Bencoded string literal. Source code in pyben\\bencode.py def bencode_str(txt: str) -> bytes: \"\"\" Encode string literals. Parameters ---------- txt : str Any text string. Returns ------- bytes Bencoded string literal. \"\"\" text = txt.encode(\"utf-8\") size = str(len(text)) + \":\" return size.encode(\"utf-8\") + text","title":"bencode_str()"},{"location":"api/#pyben.bencode.bendecode","text":"Decode bencoded data. Parameters: Name Type Description Default bits bytes Bencode encoded data. required Raises: Type Description DecodeError Malformed data. Returns: Type Description tuple Bencode decoded data. Source code in pyben\\bencode.py def bendecode(bits: bytes) -> tuple: \"\"\" Decode bencoded data. Parameters ---------- bits : bytes Bencode encoded data. Raises ------ DecodeError Malformed data. Returns ------- tuple Bencode decoded data. \"\"\" if bits.startswith(b\"i\"): match, feed = bendecode_int(bits) return match, feed if chr(bits[0]).isdigit(): match, feed = bendecode_str(bits) return match, feed if bits.startswith(b\"l\"): lst, feed = bendecode_list(bits) return lst, feed if bits.startswith(b\"d\"): dic, feed = bendecode_dict(bits) return dic, feed raise DecodeError(bits)","title":"bendecode()"},{"location":"api/#pyben.bencode.bendecode_dict","text":"Decode dictionary and it's contents. Parameters: Name Type Description Default bits bytes Bencoded dictionary. required Returns: Type Description tuple Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict(bits: bytes) -> tuple: \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : bytes Bencoded dictionary. Returns ------- tuple Decoded dictionary and contents \"\"\" dic, feed = {}, 1 while not bits[feed:].startswith(b\"e\"): match1, rest = bendecode(bits[feed:]) feed += rest match2, rest = bendecode(bits[feed:]) feed += rest dic[match1] = match2 feed += 1 return dic, feed","title":"bendecode_dict()"},{"location":"api/#pyben.bencode.bendecode_int","text":"Decode digits. Parameters: Name Type Description Default bits bytes Bencoded intiger bytes required Returns: Name Type Description int int Decoded int value. Source code in pyben\\bencode.py def bendecode_int(bits: bytes) -> int: \"\"\" Decode digits. Parameters ---------- bits : bytes Bencoded intiger bytes Returns ------- int : Decoded int value. \"\"\" obj = re.match(rb\"i(-?\\d+)e\", bits) return int(obj.group(1)), obj.end()","title":"bendecode_int()"},{"location":"api/#pyben.bencode.bendecode_list","text":"Decode list and list contents. Parameters: Name Type Description Default bits bytes Bencoded list. required Returns: Type Description tuple Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list(bits: bytes) -> tuple: \"\"\" Decode list and list contents. Parameters ---------- bits : bytes Bencoded list. Returns ------- tuple Bencode decoded list and contents. \"\"\" lst, feed = [], 1 while not bits[feed:].startswith(b\"e\"): match, rest = bendecode(bits[feed:]) lst.append(match) feed += rest feed += 1 return lst, feed","title":"bendecode_list()"},{"location":"api/#pyben.bencode.bendecode_str","text":"Bendecode string types. Parameters: Name Type Description Default units bytes Bencoded string. required Returns: Type Description str Decoded data string. Source code in pyben\\bencode.py def bendecode_str(units: bytes) -> str: \"\"\" Bendecode string types. Parameters ---------- units : bytes Bencoded string. Returns ------- str Decoded data string. \"\"\" match = re.match(rb\"(\\d+):\", units) word_len, start = int(match.groups()[0]), match.span()[1] end = start + word_len text = units[start:end] try: text = text.decode(\"utf-8\") except UnicodeDecodeError: pass return text, end","title":"bendecode_str()"},{"location":"api/#pyben.bencode.benencode","text":"Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Raises: Type Description EncodeError Cannot interpret data. Returns: Type Description bytes Bencoded data. Source code in pyben\\bencode.py def benencode(val) -> bytes: \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ EncodeError Cannot interpret data. Returns ------- bytes Bencoded data. \"\"\" if isinstance(val, str): return bencode_str(val) if isinstance(val, int): return bencode_int(val) if isinstance(val, list): return bencode_list(val) if isinstance(val, dict): return bencode_dict(val) if hasattr(val, \"hex\"): return bencode_bytes(val) if isinstance(val, tuple): return bencode_list(list(val)) raise EncodeError(val)","title":"benencode()"},{"location":"api/#pyben.exceptions","text":"Exceptions used throughout the PyBen Package/Library.","title":"exceptions"},{"location":"api/#pyben.exceptions.DecodeError","text":"Bases: Exception Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError(Exception): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg)","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception DecodeError.\"\"\" msg = f\"Unable to decode invalid {type(val)} type = {str(val)}\" super().__init__(msg)","title":"__init__()"},{"location":"api/#pyben.exceptions.EncodeError","text":"Bases: Exception Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val None Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError(Exception): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : None Value that cause the exception \"\"\" def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg)","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__(self, val=None): \"\"\"Construct Exception EncodeError.\"\"\" msg = f\"Encoder is unable to interpret {type(val)} type = {str(val)}\" super().__init__(msg)","title":"__init__()"},{"location":"api/#pyben.exceptions.FilePathError","text":"Bases: Exception Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default obj None Value that cause the exception None Source code in pyben\\exceptions.py class FilePathError(Exception): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- obj : None Value that cause the exception \"\"\" def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg)","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__(self, obj=None): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f\"{str(obj)} doesn't exist or is unavailable.\" super().__init__(msg)","title":"__init__()"},{"location":"examples/","text":"PyBen Usage Examples PyBen is small bencode encode/decode library, designed to mimic the python standard lib's pickle/json modules. Importing pyben importing the library `>>> import pyben` Example 1 Encode most builtin python data types to a bencoded byte sequence. identical to json and pickle modules. >>> data = [1, \"hello\", 2, [\"world\"], {3: \"!\"}] >>> encoded = pyben.dumps(data) >>> encoded b'li1e5:helloi2el5:worldedi3e1:!ee' Example 2 Write Bencoded python builtin data types to file. Unlike the json and pickle modules, pyben accepts a str or PathLike object as the second argument and automatically open the path in bytes, write mode( 'wb' ), or you can open supply an opened ioStream yourself just like json and pickle. >>> pyben.dump(data, \"path/to/save/filename\") or >>> with open('path/to/save/filename','wb') as binfile: >>> pyben.dump(data, binfile) Example 3 Decode a Bencoded bytes-like object Identical to json and pickle modules. >>> decoded = pyben.loads(encoded) >>> decoded [1, 'hello', 2, ['world'], {3: '!'}] Example 4 Decode the bencoded contents of a file. Mimics the behaviour of the json/pickle library's load method. Pyben accepts Path-Like and path strings as input arguement as well as an opened file buffer. >>> decoded_contents = pyben.load('path/to/save/filename') or >>> decoded_contents = pyben.load(open('path/to/save/filename', 'rb')) >>> decoded_contents [1, 'hello', 2, ['world'], {3: '!'}]","title":"Examples"},{"location":"examples/#pyben-usage-examples","text":"PyBen is small bencode encode/decode library, designed to mimic the python standard lib's pickle/json modules.","title":"PyBen Usage Examples"},{"location":"examples/#importing-pyben","text":"importing the library `>>> import pyben`","title":"Importing pyben"},{"location":"examples/#example-1","text":"Encode most builtin python data types to a bencoded byte sequence. identical to json and pickle modules. >>> data = [1, \"hello\", 2, [\"world\"], {3: \"!\"}] >>> encoded = pyben.dumps(data) >>> encoded b'li1e5:helloi2el5:worldedi3e1:!ee'","title":"Example 1"},{"location":"examples/#example-2","text":"Write Bencoded python builtin data types to file. Unlike the json and pickle modules, pyben accepts a str or PathLike object as the second argument and automatically open the path in bytes, write mode( 'wb' ), or you can open supply an opened ioStream yourself just like json and pickle. >>> pyben.dump(data, \"path/to/save/filename\") or >>> with open('path/to/save/filename','wb') as binfile: >>> pyben.dump(data, binfile)","title":"Example 2"},{"location":"examples/#example-3","text":"Decode a Bencoded bytes-like object Identical to json and pickle modules. >>> decoded = pyben.loads(encoded) >>> decoded [1, 'hello', 2, ['world'], {3: '!'}]","title":"Example 3"},{"location":"examples/#example-4","text":"Decode the bencoded contents of a file. Mimics the behaviour of the json/pickle library's load method. Pyben accepts Path-Like and path strings as input arguement as well as an opened file buffer. >>> decoded_contents = pyben.load('path/to/save/filename') or >>> decoded_contents = pyben.load(open('path/to/save/filename', 'rb')) >>> decoded_contents [1, 'hello', 2, ['world'], {3: '!'}]","title":"Example 4"}]}