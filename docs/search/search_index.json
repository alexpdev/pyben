{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyben Small library for encoding/decoding bencode data. Pyben Enables fast and easy encoding and decoding of bencoded data. Prerequisites Python v3.6+ Installing PyBen To install PyBen, follow these steps: Using pip: pip install pyben Using git: git clone https://github.com/alexpdev/pyben.git Using PyBen The API is intentionally designed to mimic Python's json and pickle modules. >>> import os >>> import pyben >>> file_path = \"path/to/encoded.file\" >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' >>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True One key difference is that the 'load' and 'dump' methods accept as arguments, string paths or path objects as well as open iobuffer. For Example this: >>> with open(file_path, \"wb\") as fd: >>> pyben.dump(decoded, fd) >>> os.path.exists(file_path) ... True >>> with open(file_path, \"rb\") as fd: >>> decoded_file = pyben.load(fd) >>> decoded_file == decoded == data ... True is the same as doing following. >>> pyben.dump(data, file_path) >>> os.path.exists(file_path) ... True >>> decoded_file = pyben.load(file_path) >>> decoded_file == decoded == data ... True The full API includes many other functions and classes as well. See docs for more full API. License This project uses the following license: Apache 2.0","title":"Home"},{"location":"#pyben","text":"Small library for encoding/decoding bencode data. Pyben Enables fast and easy encoding and decoding of bencoded data.","title":"Pyben"},{"location":"#prerequisites","text":"Python v3.6+","title":"Prerequisites"},{"location":"#installing-pyben","text":"To install PyBen, follow these steps: Using pip: pip install pyben Using git: git clone https://github.com/alexpdev/pyben.git","title":"Installing PyBen"},{"location":"#using-pyben","text":"The API is intentionally designed to mimic Python's json and pickle modules. >>> import os >>> import pyben >>> file_path = \"path/to/encoded.file\" >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' >>> decoded = pyben.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True One key difference is that the 'load' and 'dump' methods accept as arguments, string paths or path objects as well as open iobuffer. For Example this: >>> with open(file_path, \"wb\") as fd: >>> pyben.dump(decoded, fd) >>> os.path.exists(file_path) ... True >>> with open(file_path, \"rb\") as fd: >>> decoded_file = pyben.load(fd) >>> decoded_file == decoded == data ... True is the same as doing following. >>> pyben.dump(data, file_path) >>> os.path.exists(file_path) ... True >>> decoded_file = pyben.load(file_path) >>> decoded_file == decoded == data ... True The full API includes many other functions and classes as well. See docs for more full API.","title":"Using PyBen"},{"location":"#license","text":"This project uses the following license: Apache 2.0","title":"License"},{"location":"LICENSE/","text":"GNU Lesser General Public License ================================= Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below. 0. Additional Definitions As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work. 1. Exception to Section 3 of the GNU GPL You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL. 2. Conveying Modified Versions If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 3. Object Code Incorporating Material from Library Header Files The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document. 4. Combined Works You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 5. Combined Libraries You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 6. Revised Versions of the GNU Lesser General Public License The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"License"},{"location":"LICENSE/#gnu-lesser-general-public-license","text":"================================= Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.","title":"GNU Lesser General Public License"},{"location":"LICENSE/#0-additional-definitions","text":"As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.","title":"0. Additional Definitions"},{"location":"LICENSE/#1-exception-to-section-3-of-the-gnu-gpl","text":"You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.","title":"1. Exception to Section 3 of the GNU GPL"},{"location":"LICENSE/#2-conveying-modified-versions","text":"If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.","title":"2. Conveying Modified Versions"},{"location":"LICENSE/#3-object-code-incorporating-material-from-library-header-files","text":"The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document.","title":"3. Object Code Incorporating Material from Library Header Files"},{"location":"LICENSE/#4-combined-works","text":"You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)","title":"4. Combined Works"},{"location":"LICENSE/#5-combined-libraries","text":"You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.","title":"5. Combined Libraries"},{"location":"LICENSE/#6-revised-versions-of-the-gnu-lesser-general-public-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"6. Revised Versions of the GNU Lesser General Public License"},{"location":"api/","text":"PyBen API Reference pyben special PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent). Modules api classes bencode Classes Bendecoder Benencoder Functions bendecode benencode dump dumps load loads readinto api Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads tojson Usage Examples Encode inline code: >>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True Decode inline code: >>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True dump ( obj , buffer ) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer `str` or `BytesIO` File of path-like to write the data to. required Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): if hasattr ( buffer , \"decode\" ): # pragma: nocover txt = buffer . decode ( \"utf-8\" ) else : txt = buffer with open ( txt , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) dumps ( obj ) Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj `any` Object to be encoded.py. required Returns: Type Description Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return bytes ( benencode ( obj )) load ( buffer , to_json = False ) Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Type Description (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer , to_json = False ): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- any : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [ None , \"\" ]: raise FilePathError ( buffer ) if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : if hasattr ( buffer , \"decode\" ): # pragma: nocover path = buffer . decode ( \"utf-8\" ) else : path = buffer try : with open ( path , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) except FileNotFoundError as err : raise FilePathError ( buffer ) from err except IsADirectoryError as err : raise FilePathError ( buffer ) from err if to_json : decoded = _to_json ( decoded ) return decoded loadinto ( buffer , lst ) Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Type Description the list containing the output. Source code in pyben\\api.py def loadinto ( buffer , lst ): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try : output = load ( buffer ) lst . append ( output ) except PermissionError as err : lst . append ( False ) raise PermissionError from err return lst loads ( encoded , to_json = False ) Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded `bytes` Bencoded data. required to_json `bool` Convert to json serializable if true otherwise leave it alone. False Returns: Type Description (any), Decoded data. Source code in pyben\\api.py def loads ( encoded , to_json = False ): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : `bytes` Bencoded data. to_json : `bool` Convert to json serializable if true otherwise leave it alone. Returns ------- any : (any), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) if to_json : decoded = _to_json ( decoded ) return decoded show ( inp ) Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Type Description Returns True if completed successfully. Source code in pyben\\api.py def show ( inp ): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance ( inp , dict ): meta = _to_json ( inp ) elif hasattr ( inp , \"read\" ): meta = load ( inp , to_json = True ) elif isinstance ( inp , ( str , os . PathLike )): try : meta = load ( inp , to_json = True ) except FilePathError : meta = inp elif isinstance ( inp , ( bytes , bytearray )): meta = loads ( inp , to_json = True ) json . dump ( meta , sys . stdout , indent = 4 ) return True bencode API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str bencode_bytes ( bits ) Encode bytes. Parameters: Name Type Description Default bits `bytes` Bytes treated as a byte-string literal. required Returns: Type Description Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Parameters ---------- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits bencode_dict ( dic ) Encode dictionary and contents. Parameters: Name Type Description Default dic `dict` Any dictionary containing items that can be bencoded. required Returns: Type Description Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\" bencode_int ( i ) Encode integer type. Parameters: Name Type Description Default i `int` Number that needs encoding. required Returns: Type Description Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Parameters ---------- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" ) bencode_list ( elems ) Encode list and contents. Parameters: Name Type Description Default elems `list` List of items for bencoding. required Returns: Type Description Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Parameters ---------- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr bencode_str ( txt ) Encode string literals. Parameters: Name Type Description Default txt `str` Any text string. required Returns: Type Description Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Parameters ---------- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" text = txt . encode ( \"utf-8\" ) size = str ( len ( text )) + \":\" return size . encode ( \"utf-8\" ) + text bendecode ( bits ) Decode bencoded data. Parameters: Name Type Description Default bits `bytes` Bencode encoded data. required Exceptions: Type Description `DecodeError` : Malformed data. Returns: Type Description Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Parameters ---------- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits ) bendecode_dict ( bits ) Decode dictionary and it's contents. Parameters: Name Type Description Default bits `bytes` Bencoded dictionary. required Returns: Type Description `dict` Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed bendecode_int ( bits ) Decode digits. Parameters: Name Type Description Default bits `bytes` Bencoded intiger bytes required Returns: Type Description Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Parameters ---------- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () bendecode_list ( bits ) Decode list and list contents. Parameters: Name Type Description Default bits `bytes` Bencoded list. required Returns: Type Description Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Parameters ---------- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed bendecode_str ( units ) Bendecode string types. Parameters: Name Type Description Default units `bytes` Bencoded string. required Returns: Type Description Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Parameters ---------- units : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( rb \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end benencode ( val ) Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Exceptions: Type Description `EncodeError` : Cannot interpret data. Returns: Type Description Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Bendecoder Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder : \"\"\"Decode class contains all decode methods.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded def _decode ( self , bits = None ): \"\"\" Decode bencoded data. Parameters ---------- bits : ``bytes`` Bencoded data for decoding. Returns ------- `any` : The decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = self . _decode_int ( bits ) return match , feed # decode string if chr ( bits [ 0 ]) . isdigit (): num , feed = self . _decode_str ( bits ) return num , feed # decode list and contents if bits . startswith ( b \"l\" ): lst , feed = self . _decode_list ( bits ) return lst , feed # decode dictionary and contents if bits . startswith ( b \"d\" ): dic , feed = self . _decode_dict ( bits ) return dic , feed raise DecodeError ( bits ) def _decode_dict ( self , bits ): \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : ``bytes`` or `bytearray` `Bytes` of data for decoding. Returns ------- `dict` : Dictionary and contents. \"\"\" dct , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = self . _decode ( bits [ feed :]) feed += rest match2 , rest = self . _decode ( bits [ feed :]) feed += rest dct [ match1 ] = match2 feed += 1 return dct , feed def _decode_list ( self , data ): \"\"\" Decode list and its contents. Parameters ---------- data : `bytearray` Bencoded data. Returns ------- `list`: decoded list and contents \"\"\" seq , feed = [], 1 while not data [ feed :] . startswith ( b \"e\" ): match , rest = self . _decode ( data [ feed :]) seq . append ( match ) feed += rest feed += 1 return seq , feed @staticmethod def _decode_str ( bits ): \"\"\" Decode string. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded string. Returns ------- `str`: Decoded string. \"\"\" match = re . match ( rb \"(\\d+):\" , bits ) word_size , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] finish = start + word_size word = bits [ start : finish ] try : word = word . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return word , finish @staticmethod def _decode_int ( bits ): \"\"\" Decode integer type. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded intiger. Returns ------- `int`: Decoded intiger. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () __init__ ( self , data = None ) special Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None decode ( self , data = None ) Decode bencoded data. Parameters: Name Type Description Default data ``bytes`` bencoded data for decoding. None Returns: Type Description the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded load ( item ) classmethod Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item `str` or `path-like` Path containing bencoded data. required Exceptions: Type Description `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns: Type Description `any` Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) loads ( data ) classmethod Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data ``bytes`` or `bytearray` Bendencoded bytes . required Returns: Type Description `any` Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder : \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded def _encode ( self , val ): \"\"\" Encode data with bencode protocol. Parameters ---------- val : `bytes` Bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" if isinstance ( val , str ): return self . _encode_str ( val ) if hasattr ( val , \"hex\" ): return self . _encode_bytes ( val ) if isinstance ( val , int ): return self . _encode_int ( val ) if isinstance ( val , list ): return self . _encode_list ( val ) if isinstance ( val , dict ): return self . _encode_dict ( val ) if isinstance ( val , tuple ): return self . _encode_list ( list ( val )) raise EncodeError ( val ) @staticmethod def _encode_bytes ( val ): \"\"\"Bencode encoding bytes as string literal.\"\"\" size = str ( len ( val )) + \":\" return size . encode ( \"utf-8\" ) + val @staticmethod def _encode_str ( txt ): \"\"\" Decode string. Parameters ---------- txt : `str` Any string literal. Returns ------- `bytes` : Bencoded string. \"\"\" size = str ( len ( txt )) . encode ( \"utf-8\" ) return size + b \":\" + txt . encode ( \"utf-8\" ) @staticmethod def _encode_int ( num ): \"\"\" Encode intiger. Parameters ---------- num : `int` Integer for encoding. Returns ------- `bytes` : Bencoded intiger. \"\"\" return b \"i\" + str ( num ) . encode ( \"utf-8\" ) + b \"e\" def _encode_list ( self , elems ): \"\"\" Encode list and its contents. Parameters ---------- elems : `list` List of content to be encoded. Returns ------- `bytes` : Bencoded data \"\"\" lst = [ b \"l\" ] for elem in elems : encoded = self . _encode ( elem ) lst . append ( encoded ) lst . append ( b \"e\" ) bit_lst = b \"\" . join ( lst ) return bit_lst def _encode_dict ( self , dic ): \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : `dict` Dictionary of data for encoding. Returns ------- `bytes` : Bencoded data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ self . _encode ( key ), self . _encode ( val )]) return result + b \"e\" __init__ ( self , data = None ) special Initialize Benencoder insance with optional pre compiled data. Parameters: Name Type Description Default data any (Optional) Target data for encoding. Defaults to None. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None dump ( data , path ) classmethod Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py required Returns: Type Description Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True dumps ( data ) classmethod Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () encode ( self , val = None ) Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any Data for encoding. Defaults to None. None Returns: Type Description encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded exceptions Exceptions used throughout the PyBen Package/Library. DecodeError ( Exception ) Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError ( Exception ): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) __init__ ( self , val = None ) special Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) EncodeError ( Exception ) Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError ( Exception ): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) __init__ ( self , val = None ) special Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) FilePathError ( Exception ) Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default val any Value that cause the exception required Source code in pyben\\exceptions.py class FilePathError ( Exception ): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg ) __init__ ( self , obj = None ) special Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg ) version Module containing the current version. module pyben. api Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads tojson Usage Examples Encode inline code: >>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True Decode inline code: >>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True Functions dump ( obj , buffer ) \u2014 Shortcut function for bencode encode data and write to file. dumps ( obj ) (`bytes` :) \u2014 Shortuct function to encoding given obj to bencode encoding. load ( buffer , to_json ) (any :) \u2014 Load bencoded data from a file of path object and decodes it. loadinto ( buffer , lst ) (list :) \u2014 Shortcut function to load becoded data from file and store it in list. loads ( encoded , to_json ) (any :) \u2014 Shortcut function for decoding encoded data. show ( inp ) (bool :) \u2014 Ouptut readable metadata. pyben.api Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads tojson Usage Examples Encode inline code: >>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True Decode inline code: >>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True dump ( obj , buffer ) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer `str` or `BytesIO` File of path-like to write the data to. required Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): if hasattr ( buffer , \"decode\" ): # pragma: nocover txt = buffer . decode ( \"utf-8\" ) else : txt = buffer with open ( txt , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) dumps ( obj ) Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj `any` Object to be encoded.py. required Returns: Type Description Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return bytes ( benencode ( obj )) load ( buffer , to_json = False ) Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Type Description (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer , to_json = False ): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- any : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [ None , \"\" ]: raise FilePathError ( buffer ) if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : if hasattr ( buffer , \"decode\" ): # pragma: nocover path = buffer . decode ( \"utf-8\" ) else : path = buffer try : with open ( path , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) except FileNotFoundError as err : raise FilePathError ( buffer ) from err except IsADirectoryError as err : raise FilePathError ( buffer ) from err if to_json : decoded = _to_json ( decoded ) return decoded loadinto ( buffer , lst ) Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Type Description the list containing the output. Source code in pyben\\api.py def loadinto ( buffer , lst ): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try : output = load ( buffer ) lst . append ( output ) except PermissionError as err : lst . append ( False ) raise PermissionError from err return lst loads ( encoded , to_json = False ) Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded `bytes` Bencoded data. required to_json `bool` Convert to json serializable if true otherwise leave it alone. False Returns: Type Description (any), Decoded data. Source code in pyben\\api.py def loads ( encoded , to_json = False ): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : `bytes` Bencoded data. to_json : `bool` Convert to json serializable if true otherwise leave it alone. Returns ------- any : (any), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) if to_json : decoded = _to_json ( decoded ) return decoded show ( inp ) Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Type Description Returns True if completed successfully. Source code in pyben\\api.py def show ( inp ): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance ( inp , dict ): meta = _to_json ( inp ) elif hasattr ( inp , \"read\" ): meta = load ( inp , to_json = True ) elif isinstance ( inp , ( str , os . PathLike )): try : meta = load ( inp , to_json = True ) except FilePathError : meta = inp elif isinstance ( inp , ( bytes , bytearray )): meta = loads ( inp , to_json = True ) json . dump ( meta , sys . stdout , indent = 4 ) return True module pyben. classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Classes Bendecoder \u2014 Decode class contains all decode methods. Benencoder \u2014 Encoder for bencode encoding used for Bittorrent meta-files. pyben.classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Bendecoder Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder : \"\"\"Decode class contains all decode methods.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded def _decode ( self , bits = None ): \"\"\" Decode bencoded data. Parameters ---------- bits : ``bytes`` Bencoded data for decoding. Returns ------- `any` : The decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = self . _decode_int ( bits ) return match , feed # decode string if chr ( bits [ 0 ]) . isdigit (): num , feed = self . _decode_str ( bits ) return num , feed # decode list and contents if bits . startswith ( b \"l\" ): lst , feed = self . _decode_list ( bits ) return lst , feed # decode dictionary and contents if bits . startswith ( b \"d\" ): dic , feed = self . _decode_dict ( bits ) return dic , feed raise DecodeError ( bits ) def _decode_dict ( self , bits ): \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : ``bytes`` or `bytearray` `Bytes` of data for decoding. Returns ------- `dict` : Dictionary and contents. \"\"\" dct , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = self . _decode ( bits [ feed :]) feed += rest match2 , rest = self . _decode ( bits [ feed :]) feed += rest dct [ match1 ] = match2 feed += 1 return dct , feed def _decode_list ( self , data ): \"\"\" Decode list and its contents. Parameters ---------- data : `bytearray` Bencoded data. Returns ------- `list`: decoded list and contents \"\"\" seq , feed = [], 1 while not data [ feed :] . startswith ( b \"e\" ): match , rest = self . _decode ( data [ feed :]) seq . append ( match ) feed += rest feed += 1 return seq , feed @staticmethod def _decode_str ( bits ): \"\"\" Decode string. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded string. Returns ------- `str`: Decoded string. \"\"\" match = re . match ( rb \"(\\d+):\" , bits ) word_size , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] finish = start + word_size word = bits [ start : finish ] try : word = word . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return word , finish @staticmethod def _decode_int ( bits ): \"\"\" Decode integer type. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded intiger. Returns ------- `int`: Decoded intiger. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () __init__ ( self , data = None ) special Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None decode ( self , data = None ) Decode bencoded data. Parameters: Name Type Description Default data ``bytes`` bencoded data for decoding. None Returns: Type Description the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded load ( item ) classmethod Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item `str` or `path-like` Path containing bencoded data. required Exceptions: Type Description `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns: Type Description `any` Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) loads ( data ) classmethod Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data ``bytes`` or `bytearray` Bendencoded bytes . required Returns: Type Description `any` Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder : \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded def _encode ( self , val ): \"\"\" Encode data with bencode protocol. Parameters ---------- val : `bytes` Bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" if isinstance ( val , str ): return self . _encode_str ( val ) if hasattr ( val , \"hex\" ): return self . _encode_bytes ( val ) if isinstance ( val , int ): return self . _encode_int ( val ) if isinstance ( val , list ): return self . _encode_list ( val ) if isinstance ( val , dict ): return self . _encode_dict ( val ) if isinstance ( val , tuple ): return self . _encode_list ( list ( val )) raise EncodeError ( val ) @staticmethod def _encode_bytes ( val ): \"\"\"Bencode encoding bytes as string literal.\"\"\" size = str ( len ( val )) + \":\" return size . encode ( \"utf-8\" ) + val @staticmethod def _encode_str ( txt ): \"\"\" Decode string. Parameters ---------- txt : `str` Any string literal. Returns ------- `bytes` : Bencoded string. \"\"\" size = str ( len ( txt )) . encode ( \"utf-8\" ) return size + b \":\" + txt . encode ( \"utf-8\" ) @staticmethod def _encode_int ( num ): \"\"\" Encode intiger. Parameters ---------- num : `int` Integer for encoding. Returns ------- `bytes` : Bencoded intiger. \"\"\" return b \"i\" + str ( num ) . encode ( \"utf-8\" ) + b \"e\" def _encode_list ( self , elems ): \"\"\" Encode list and its contents. Parameters ---------- elems : `list` List of content to be encoded. Returns ------- `bytes` : Bencoded data \"\"\" lst = [ b \"l\" ] for elem in elems : encoded = self . _encode ( elem ) lst . append ( encoded ) lst . append ( b \"e\" ) bit_lst = b \"\" . join ( lst ) return bit_lst def _encode_dict ( self , dic ): \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : `dict` Dictionary of data for encoding. Returns ------- `bytes` : Bencoded data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ self . _encode ( key ), self . _encode ( val )]) return result + b \"e\" __init__ ( self , data = None ) special Initialize Benencoder insance with optional pre compiled data. Parameters: Name Type Description Default data any (Optional) Target data for encoding. Defaults to None. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None dump ( data , path ) classmethod Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py required Returns: Type Description Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True dumps ( data ) classmethod Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () encode ( self , val = None ) Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any Data for encoding. Defaults to None. None Returns: Type Description encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded module pyben. bencode API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str Functions bencode_bytes ( bits ) (`bytes`:) \u2014 Encode bytes. bencode_dict ( dic ) (`bytes` :) \u2014 Encode dictionary and contents. bencode_int ( i ) (`bytes` :) \u2014 Encode integer type. bencode_list ( elems ) (`bytes` :) \u2014 Encode list and contents. bencode_str ( txt ) (`bytes` :) \u2014 Encode string literals. bendecode ( bits ) (any :) \u2014 Decode bencoded data. bendecode_dict ( bits ) (`dict`) \u2014 Decode dictionary and it's contents. bendecode_int ( bits ) (`int` :) \u2014 Decode digits. bendecode_list ( bits ) (`list` :) \u2014 Decode list and list contents. bendecode_str ( units ) (`str` :) \u2014 Bendecode string types. benencode ( val ) (`bytes` :) \u2014 Encode data with bencoding. pyben.bencode API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str bencode_bytes ( bits ) Encode bytes. Parameters: Name Type Description Default bits `bytes` Bytes treated as a byte-string literal. required Returns: Type Description Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Parameters ---------- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits bencode_dict ( dic ) Encode dictionary and contents. Parameters: Name Type Description Default dic `dict` Any dictionary containing items that can be bencoded. required Returns: Type Description Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\" bencode_int ( i ) Encode integer type. Parameters: Name Type Description Default i `int` Number that needs encoding. required Returns: Type Description Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Parameters ---------- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" ) bencode_list ( elems ) Encode list and contents. Parameters: Name Type Description Default elems `list` List of items for bencoding. required Returns: Type Description Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Parameters ---------- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr bencode_str ( txt ) Encode string literals. Parameters: Name Type Description Default txt `str` Any text string. required Returns: Type Description Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Parameters ---------- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" text = txt . encode ( \"utf-8\" ) size = str ( len ( text )) + \":\" return size . encode ( \"utf-8\" ) + text bendecode ( bits ) Decode bencoded data. Parameters: Name Type Description Default bits `bytes` Bencode encoded data. required Exceptions: Type Description `DecodeError` : Malformed data. Returns: Type Description Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Parameters ---------- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits ) bendecode_dict ( bits ) Decode dictionary and it's contents. Parameters: Name Type Description Default bits `bytes` Bencoded dictionary. required Returns: Type Description `dict` Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed bendecode_int ( bits ) Decode digits. Parameters: Name Type Description Default bits `bytes` Bencoded intiger bytes required Returns: Type Description Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Parameters ---------- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () bendecode_list ( bits ) Decode list and list contents. Parameters: Name Type Description Default bits `bytes` Bencoded list. required Returns: Type Description Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Parameters ---------- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed bendecode_str ( units ) Bendecode string types. Parameters: Name Type Description Default units `bytes` Bencoded string. required Returns: Type Description Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Parameters ---------- units : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( rb \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end benencode ( val ) Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Exceptions: Type Description `EncodeError` : Cannot interpret data. Returns: Type Description Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) module pyben. exceptions Exceptions used throughout the PyBen Package/Library. Classes DecodeError \u2014 Error occured during decode process. EncodeError \u2014 Error occured during encoding process. FilePathError \u2014 Bad path error. pyben.exceptions Exceptions used throughout the PyBen Package/Library. DecodeError ( Exception ) Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError ( Exception ): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) __init__ ( self , val = None ) special Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) EncodeError ( Exception ) Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError ( Exception ): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) __init__ ( self , val = None ) special Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) FilePathError ( Exception ) Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default val any Value that cause the exception required Source code in pyben\\exceptions.py class FilePathError ( Exception ): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg ) __init__ ( self , obj = None ) special Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"API"},{"location":"api/#pyben-api-reference","text":"","title":"PyBen API Reference"},{"location":"api/#pyben","text":"PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent).","title":"pyben"},{"location":"api/#pyben--modules","text":"api classes bencode","title":"Modules"},{"location":"api/#pyben--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben--functions","text":"bendecode benencode dump dumps load loads readinto","title":"Functions"},{"location":"api/#pyben.api","text":"","title":"api"},{"location":"api/#pyben.api--bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#pyben.api--functions","text":"dump dumps load loads tojson","title":"Functions"},{"location":"api/#pyben.api--usage-examples","text":"","title":"Usage Examples"},{"location":"api/#pyben.api--encode-inline-code","text":">>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#pyben.api--encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True","title":"Encode to file:"},{"location":"api/#pyben.api--decode-inline-code","text":">>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True","title":"Decode inline code:"},{"location":"api/#pyben.api--decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True","title":"Decode from file:"},{"location":"api/#pyben.api.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer `str` or `BytesIO` File of path-like to write the data to. required Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): if hasattr ( buffer , \"decode\" ): # pragma: nocover txt = buffer . decode ( \"utf-8\" ) else : txt = buffer with open ( txt , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded )","title":"dump()"},{"location":"api/#pyben.api.dumps","text":"Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj `any` Object to be encoded.py. required Returns: Type Description Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return bytes ( benencode ( obj ))","title":"dumps()"},{"location":"api/#pyben.api.load","text":"Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Type Description (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer , to_json = False ): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- any : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [ None , \"\" ]: raise FilePathError ( buffer ) if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : if hasattr ( buffer , \"decode\" ): # pragma: nocover path = buffer . decode ( \"utf-8\" ) else : path = buffer try : with open ( path , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) except FileNotFoundError as err : raise FilePathError ( buffer ) from err except IsADirectoryError as err : raise FilePathError ( buffer ) from err if to_json : decoded = _to_json ( decoded ) return decoded","title":"load()"},{"location":"api/#pyben.api.loadinto","text":"Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Type Description the list containing the output. Source code in pyben\\api.py def loadinto ( buffer , lst ): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try : output = load ( buffer ) lst . append ( output ) except PermissionError as err : lst . append ( False ) raise PermissionError from err return lst","title":"loadinto()"},{"location":"api/#pyben.api.loads","text":"Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded `bytes` Bencoded data. required to_json `bool` Convert to json serializable if true otherwise leave it alone. False Returns: Type Description (any), Decoded data. Source code in pyben\\api.py def loads ( encoded , to_json = False ): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : `bytes` Bencoded data. to_json : `bool` Convert to json serializable if true otherwise leave it alone. Returns ------- any : (any), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) if to_json : decoded = _to_json ( decoded ) return decoded","title":"loads()"},{"location":"api/#pyben.api.show","text":"Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Type Description Returns True if completed successfully. Source code in pyben\\api.py def show ( inp ): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance ( inp , dict ): meta = _to_json ( inp ) elif hasattr ( inp , \"read\" ): meta = load ( inp , to_json = True ) elif isinstance ( inp , ( str , os . PathLike )): try : meta = load ( inp , to_json = True ) except FilePathError : meta = inp elif isinstance ( inp , ( bytes , bytearray )): meta = loads ( inp , to_json = True ) json . dump ( meta , sys . stdout , indent = 4 ) return True","title":"show()"},{"location":"api/#pyben.bencode","text":"API helper functions for decoding and encoding data with bencode format.","title":"bencode"},{"location":"api/#pyben.bencode--functions","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str","title":"Functions"},{"location":"api/#pyben.bencode.bencode_bytes","text":"Encode bytes. Parameters: Name Type Description Default bits `bytes` Bytes treated as a byte-string literal. required Returns: Type Description Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Parameters ---------- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits","title":"bencode_bytes()"},{"location":"api/#pyben.bencode.bencode_dict","text":"Encode dictionary and contents. Parameters: Name Type Description Default dic `dict` Any dictionary containing items that can be bencoded. required Returns: Type Description Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\"","title":"bencode_dict()"},{"location":"api/#pyben.bencode.bencode_int","text":"Encode integer type. Parameters: Name Type Description Default i `int` Number that needs encoding. required Returns: Type Description Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Parameters ---------- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" )","title":"bencode_int()"},{"location":"api/#pyben.bencode.bencode_list","text":"Encode list and contents. Parameters: Name Type Description Default elems `list` List of items for bencoding. required Returns: Type Description Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Parameters ---------- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr","title":"bencode_list()"},{"location":"api/#pyben.bencode.bencode_str","text":"Encode string literals. Parameters: Name Type Description Default txt `str` Any text string. required Returns: Type Description Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Parameters ---------- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" text = txt . encode ( \"utf-8\" ) size = str ( len ( text )) + \":\" return size . encode ( \"utf-8\" ) + text","title":"bencode_str()"},{"location":"api/#pyben.bencode.bendecode","text":"Decode bencoded data. Parameters: Name Type Description Default bits `bytes` Bencode encoded data. required Exceptions: Type Description `DecodeError` : Malformed data. Returns: Type Description Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Parameters ---------- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits )","title":"bendecode()"},{"location":"api/#pyben.bencode.bendecode_dict","text":"Decode dictionary and it's contents. Parameters: Name Type Description Default bits `bytes` Bencoded dictionary. required Returns: Type Description `dict` Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed","title":"bendecode_dict()"},{"location":"api/#pyben.bencode.bendecode_int","text":"Decode digits. Parameters: Name Type Description Default bits `bytes` Bencoded intiger bytes required Returns: Type Description Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Parameters ---------- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"bendecode_int()"},{"location":"api/#pyben.bencode.bendecode_list","text":"Decode list and list contents. Parameters: Name Type Description Default bits `bytes` Bencoded list. required Returns: Type Description Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Parameters ---------- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed","title":"bendecode_list()"},{"location":"api/#pyben.bencode.bendecode_str","text":"Bendecode string types. Parameters: Name Type Description Default units `bytes` Bencoded string. required Returns: Type Description Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Parameters ---------- units : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( rb \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end","title":"bendecode_str()"},{"location":"api/#pyben.bencode.benencode","text":"Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Exceptions: Type Description `EncodeError` : Cannot interpret data. Returns: Type Description Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val )","title":"benencode()"},{"location":"api/#pyben.classes","text":"OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"classes"},{"location":"api/#pyben.classes--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben.classes.Bendecoder","text":"Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder : \"\"\"Decode class contains all decode methods.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded def _decode ( self , bits = None ): \"\"\" Decode bencoded data. Parameters ---------- bits : ``bytes`` Bencoded data for decoding. Returns ------- `any` : The decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = self . _decode_int ( bits ) return match , feed # decode string if chr ( bits [ 0 ]) . isdigit (): num , feed = self . _decode_str ( bits ) return num , feed # decode list and contents if bits . startswith ( b \"l\" ): lst , feed = self . _decode_list ( bits ) return lst , feed # decode dictionary and contents if bits . startswith ( b \"d\" ): dic , feed = self . _decode_dict ( bits ) return dic , feed raise DecodeError ( bits ) def _decode_dict ( self , bits ): \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : ``bytes`` or `bytearray` `Bytes` of data for decoding. Returns ------- `dict` : Dictionary and contents. \"\"\" dct , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = self . _decode ( bits [ feed :]) feed += rest match2 , rest = self . _decode ( bits [ feed :]) feed += rest dct [ match1 ] = match2 feed += 1 return dct , feed def _decode_list ( self , data ): \"\"\" Decode list and its contents. Parameters ---------- data : `bytearray` Bencoded data. Returns ------- `list`: decoded list and contents \"\"\" seq , feed = [], 1 while not data [ feed :] . startswith ( b \"e\" ): match , rest = self . _decode ( data [ feed :]) seq . append ( match ) feed += rest feed += 1 return seq , feed @staticmethod def _decode_str ( bits ): \"\"\" Decode string. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded string. Returns ------- `str`: Decoded string. \"\"\" match = re . match ( rb \"(\\d+):\" , bits ) word_size , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] finish = start + word_size word = bits [ start : finish ] try : word = word . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return word , finish @staticmethod def _decode_int ( bits ): \"\"\" Decode integer type. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded intiger. Returns ------- `int`: Decoded intiger. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data. Parameters: Name Type Description Default data ``bytes`` bencoded data for decoding. None Returns: Type Description the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item `str` or `path-like` Path containing bencoded data. required Exceptions: Type Description `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns: Type Description `any` Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data )","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data ``bytes`` or `bytearray` Bendencoded bytes . required Returns: Type Description `any` Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data )","title":"loads()"},{"location":"api/#pyben.classes.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder : \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded def _encode ( self , val ): \"\"\" Encode data with bencode protocol. Parameters ---------- val : `bytes` Bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" if isinstance ( val , str ): return self . _encode_str ( val ) if hasattr ( val , \"hex\" ): return self . _encode_bytes ( val ) if isinstance ( val , int ): return self . _encode_int ( val ) if isinstance ( val , list ): return self . _encode_list ( val ) if isinstance ( val , dict ): return self . _encode_dict ( val ) if isinstance ( val , tuple ): return self . _encode_list ( list ( val )) raise EncodeError ( val ) @staticmethod def _encode_bytes ( val ): \"\"\"Bencode encoding bytes as string literal.\"\"\" size = str ( len ( val )) + \":\" return size . encode ( \"utf-8\" ) + val @staticmethod def _encode_str ( txt ): \"\"\" Decode string. Parameters ---------- txt : `str` Any string literal. Returns ------- `bytes` : Bencoded string. \"\"\" size = str ( len ( txt )) . encode ( \"utf-8\" ) return size + b \":\" + txt . encode ( \"utf-8\" ) @staticmethod def _encode_int ( num ): \"\"\" Encode intiger. Parameters ---------- num : `int` Integer for encoding. Returns ------- `bytes` : Bencoded intiger. \"\"\" return b \"i\" + str ( num ) . encode ( \"utf-8\" ) + b \"e\" def _encode_list ( self , elems ): \"\"\" Encode list and its contents. Parameters ---------- elems : `list` List of content to be encoded. Returns ------- `bytes` : Bencoded data \"\"\" lst = [ b \"l\" ] for elem in elems : encoded = self . _encode ( elem ) lst . append ( encoded ) lst . append ( b \"e\" ) bit_lst = b \"\" . join ( lst ) return bit_lst def _encode_dict ( self , dic ): \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : `dict` Dictionary of data for encoding. Returns ------- `bytes` : Bencoded data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ self . _encode ( key ), self . _encode ( val )]) return result + b \"e\"","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Initialize Benencoder insance with optional pre compiled data. Parameters: Name Type Description Default data any (Optional) Target data for encoding. Defaults to None. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py required Returns: Type Description Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode ()","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any Data for encoding. Defaults to None. None Returns: Type Description encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded","title":"encode()"},{"location":"api/#pyben.exceptions","text":"Exceptions used throughout the PyBen Package/Library.","title":"exceptions"},{"location":"api/#pyben.exceptions.DecodeError","text":"Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError ( Exception ): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.EncodeError","text":"Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError ( Exception ): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.FilePathError","text":"Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default val any Value that cause the exception required Source code in pyben\\exceptions.py class FilePathError ( Exception ): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.version","text":"Module containing the current version. module pyben. api","title":"version"},{"location":"api/#bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#functions","text":"dump dumps load loads tojson","title":"Functions"},{"location":"api/#usage-examples","text":"","title":"Usage Examples"},{"location":"api/#encode-inline-code","text":">>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True","title":"Encode to file:"},{"location":"api/#decode-inline-code","text":">>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True","title":"Decode inline code:"},{"location":"api/#decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True Functions dump ( obj , buffer ) \u2014 Shortcut function for bencode encode data and write to file. dumps ( obj ) (`bytes` :) \u2014 Shortuct function to encoding given obj to bencode encoding. load ( buffer , to_json ) (any :) \u2014 Load bencoded data from a file of path object and decodes it. loadinto ( buffer , lst ) (list :) \u2014 Shortcut function to load becoded data from file and store it in list. loads ( encoded , to_json ) (any :) \u2014 Shortcut function for decoding encoded data. show ( inp ) (bool :) \u2014 Ouptut readable metadata.","title":"Decode from file:"},{"location":"api/#pyben.api","text":"","title":"api"},{"location":"api/#pyben.api--bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#pyben.api--functions","text":"dump dumps load loads tojson","title":"Functions"},{"location":"api/#pyben.api--usage-examples","text":"","title":"Usage Examples"},{"location":"api/#pyben.api--encode-inline-code","text":">>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#pyben.api--encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True","title":"Encode to file:"},{"location":"api/#pyben.api--decode-inline-code","text":">>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True","title":"Decode inline code:"},{"location":"api/#pyben.api--decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True","title":"Decode from file:"},{"location":"api/#pyben.api.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters: Name Type Description Default obj any Data to be encoded. required buffer `str` or `BytesIO` File of path-like to write the data to. required Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Parameters ---------- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): if hasattr ( buffer , \"decode\" ): # pragma: nocover txt = buffer . decode ( \"utf-8\" ) else : txt = buffer with open ( txt , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded )","title":"dump()"},{"location":"api/#pyben.api.dumps","text":"Shortuct function to encoding given obj to bencode encoding. Parameters: Name Type Description Default obj `any` Object to be encoded.py. required Returns: Type Description Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Parameters ---------- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return bytes ( benencode ( obj ))","title":"dumps()"},{"location":"api/#pyben.api.load","text":"Load bencoded data from a file of path object and decodes it. Parameters: Name Type Description Default buffer str Open and/or read data from file to be decoded. required to_json bool convert to json serializable metadata if True else leave it alone. False Returns: Type Description (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer , to_json = False ): \"\"\" Load bencoded data from a file of path object and decodes it. Parameters ---------- buffer : str Open and/or read data from file to be decoded. to_json : bool convert to json serializable metadata if True else leave it alone. Returns ------- any : (commonly `dict`), Decoded contents of file. \"\"\" if buffer in [ None , \"\" ]: raise FilePathError ( buffer ) if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : if hasattr ( buffer , \"decode\" ): # pragma: nocover path = buffer . decode ( \"utf-8\" ) else : path = buffer try : with open ( path , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) except FileNotFoundError as err : raise FilePathError ( buffer ) from err except IsADirectoryError as err : raise FilePathError ( buffer ) from err if to_json : decoded = _to_json ( decoded ) return decoded","title":"load()"},{"location":"api/#pyben.api.loadinto","text":"Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters: Name Type Description Default buffer str string or open file buffer. required lst list variable to store output into required Returns: Type Description the list containing the output. Source code in pyben\\api.py def loadinto ( buffer , lst ): \"\"\" Shortcut function to load becoded data from file and store it in list. This function is most useful for multithreading purposes. Parameters ---------- buffer : str string or open file buffer. lst : list variable to store output into Returns ------- list : the list containing the output. \"\"\" try : output = load ( buffer ) lst . append ( output ) except PermissionError as err : lst . append ( False ) raise PermissionError from err return lst","title":"loadinto()"},{"location":"api/#pyben.api.loads","text":"Shortcut function for decoding encoded data. Parameters: Name Type Description Default encoded `bytes` Bencoded data. required to_json `bool` Convert to json serializable if true otherwise leave it alone. False Returns: Type Description (any), Decoded data. Source code in pyben\\api.py def loads ( encoded , to_json = False ): \"\"\" Shortcut function for decoding encoded data. Parameters ---------- encoded : `bytes` Bencoded data. to_json : `bool` Convert to json serializable if true otherwise leave it alone. Returns ------- any : (any), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) if to_json : decoded = _to_json ( decoded ) return decoded","title":"loads()"},{"location":"api/#pyben.api.show","text":"Ouptut readable metadata. Parameters: Name Type Description Default inp any Pre-formatted input type. required Returns: Type Description Returns True if completed successfully. Source code in pyben\\api.py def show ( inp ): \"\"\" Ouptut readable metadata. Parameters ---------- inp : any Pre-formatted input type. Returns ------- bool : Returns True if completed successfully. \"\"\" import json import os import sys if isinstance ( inp , dict ): meta = _to_json ( inp ) elif hasattr ( inp , \"read\" ): meta = load ( inp , to_json = True ) elif isinstance ( inp , ( str , os . PathLike )): try : meta = load ( inp , to_json = True ) except FilePathError : meta = inp elif isinstance ( inp , ( bytes , bytearray )): meta = loads ( inp , to_json = True ) json . dump ( meta , sys . stdout , indent = 4 ) return True module pyben. classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"show()"},{"location":"api/#classes","text":"Bendecoder Benencoder Classes Bendecoder \u2014 Decode class contains all decode methods. Benencoder \u2014 Encoder for bencode encoding used for Bittorrent meta-files.","title":"Classes"},{"location":"api/#pyben.classes","text":"OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"classes"},{"location":"api/#pyben.classes--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben.classes.Bendecoder","text":"Decode class contains all decode methods. Source code in pyben\\classes.py class Bendecoder : \"\"\"Decode class contains all decode methods.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded def _decode ( self , bits = None ): \"\"\" Decode bencoded data. Parameters ---------- bits : ``bytes`` Bencoded data for decoding. Returns ------- `any` : The decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = self . _decode_int ( bits ) return match , feed # decode string if chr ( bits [ 0 ]) . isdigit (): num , feed = self . _decode_str ( bits ) return num , feed # decode list and contents if bits . startswith ( b \"l\" ): lst , feed = self . _decode_list ( bits ) return lst , feed # decode dictionary and contents if bits . startswith ( b \"d\" ): dic , feed = self . _decode_dict ( bits ) return dic , feed raise DecodeError ( bits ) def _decode_dict ( self , bits ): \"\"\" Decode keys and values in dictionary. Parameters ---------- bits : ``bytes`` or `bytearray` `Bytes` of data for decoding. Returns ------- `dict` : Dictionary and contents. \"\"\" dct , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = self . _decode ( bits [ feed :]) feed += rest match2 , rest = self . _decode ( bits [ feed :]) feed += rest dct [ match1 ] = match2 feed += 1 return dct , feed def _decode_list ( self , data ): \"\"\" Decode list and its contents. Parameters ---------- data : `bytearray` Bencoded data. Returns ------- `list`: decoded list and contents \"\"\" seq , feed = [], 1 while not data [ feed :] . startswith ( b \"e\" ): match , rest = self . _decode ( data [ feed :]) seq . append ( match ) feed += rest feed += 1 return seq , feed @staticmethod def _decode_str ( bits ): \"\"\" Decode string. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded string. Returns ------- `str`: Decoded string. \"\"\" match = re . match ( rb \"(\\d+):\" , bits ) word_size , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] finish = start + word_size word = bits [ start : finish ] try : word = word . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return word , finish @staticmethod def _decode_int ( bits ): \"\"\" Decode integer type. Parameters ---------- bits : ``bytes`` or `bytearray` Bencoded intiger. Returns ------- `int`: Decoded intiger. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. Parameters: Name Type Description Default data `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Parameters ---------- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data. Parameters: Name Type Description Default data ``bytes`` bencoded data for decoding. None Returns: Type Description the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Parameters ---------- data : ``bytes`` bencoded data for decoding. Returns ------- `any` : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data. Parameters: Name Type Description Default item `str` or `path-like` Path containing bencoded data. required Exceptions: Type Description `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns: Type Description `any` Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Parameters ---------- item : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- `any` Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data )","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data. Parameters: Name Type Description Default data ``bytes`` or `bytearray` Bendencoded bytes . required Returns: Type Description `any` Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Parameters ---------- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- `any` Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data )","title":"loads()"},{"location":"api/#pyben.classes.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files. Source code in pyben\\classes.py class Benencoder : \"\"\"Encoder for bencode encoding used for Bittorrent meta-files.\"\"\" def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded def _encode ( self , val ): \"\"\" Encode data with bencode protocol. Parameters ---------- val : `bytes` Bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" if isinstance ( val , str ): return self . _encode_str ( val ) if hasattr ( val , \"hex\" ): return self . _encode_bytes ( val ) if isinstance ( val , int ): return self . _encode_int ( val ) if isinstance ( val , list ): return self . _encode_list ( val ) if isinstance ( val , dict ): return self . _encode_dict ( val ) if isinstance ( val , tuple ): return self . _encode_list ( list ( val )) raise EncodeError ( val ) @staticmethod def _encode_bytes ( val ): \"\"\"Bencode encoding bytes as string literal.\"\"\" size = str ( len ( val )) + \":\" return size . encode ( \"utf-8\" ) + val @staticmethod def _encode_str ( txt ): \"\"\" Decode string. Parameters ---------- txt : `str` Any string literal. Returns ------- `bytes` : Bencoded string. \"\"\" size = str ( len ( txt )) . encode ( \"utf-8\" ) return size + b \":\" + txt . encode ( \"utf-8\" ) @staticmethod def _encode_int ( num ): \"\"\" Encode intiger. Parameters ---------- num : `int` Integer for encoding. Returns ------- `bytes` : Bencoded intiger. \"\"\" return b \"i\" + str ( num ) . encode ( \"utf-8\" ) + b \"e\" def _encode_list ( self , elems ): \"\"\" Encode list and its contents. Parameters ---------- elems : `list` List of content to be encoded. Returns ------- `bytes` : Bencoded data \"\"\" lst = [ b \"l\" ] for elem in elems : encoded = self . _encode ( elem ) lst . append ( encoded ) lst . append ( b \"e\" ) bit_lst = b \"\" . join ( lst ) return bit_lst def _encode_dict ( self , dic ): \"\"\" Encode keys and values in dictionary. Parameters ---------- dic : `dict` Dictionary of data for encoding. Returns ------- `bytes` : Bencoded data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ self . _encode ( key ), self . _encode ( val )]) return result + b \"e\"","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Initialize Benencoder insance with optional pre compiled data. Parameters: Name Type Description Default data any (Optional) Target data for encoding. Defaults to None. None Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Parameters ---------- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut class method for encoding data and writing to file. Parameters: Name Type Description Default data any Raw data to be encoded, usually dict.txt required path `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py required Returns: Type Description Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut class method for encoding data and writing to file. Parameters ---------- data : any Raw data to be encoded, usually dict.txt path : `str` or `os.PathLike` or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it. Parameters: Name Type Description Default data any Raw data to be encoded usually a dictionary. required Returns: Type Description Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Parameters ---------- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode ()","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization. Parameters: Name Type Description Default val any Data for encoding. Defaults to None. None Returns: Type Description encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Parameters ---------- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded module pyben. bencode API helper functions for decoding and encoding data with bencode format.","title":"encode()"},{"location":"api/#functions_1","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str Functions bencode_bytes ( bits ) (`bytes`:) \u2014 Encode bytes. bencode_dict ( dic ) (`bytes` :) \u2014 Encode dictionary and contents. bencode_int ( i ) (`bytes` :) \u2014 Encode integer type. bencode_list ( elems ) (`bytes` :) \u2014 Encode list and contents. bencode_str ( txt ) (`bytes` :) \u2014 Encode string literals. bendecode ( bits ) (any :) \u2014 Decode bencoded data. bendecode_dict ( bits ) (`dict`) \u2014 Decode dictionary and it's contents. bendecode_int ( bits ) (`int` :) \u2014 Decode digits. bendecode_list ( bits ) (`list` :) \u2014 Decode list and list contents. bendecode_str ( units ) (`str` :) \u2014 Bendecode string types. benencode ( val ) (`bytes` :) \u2014 Encode data with bencoding.","title":"Functions"},{"location":"api/#pyben.bencode","text":"API helper functions for decoding and encoding data with bencode format.","title":"bencode"},{"location":"api/#pyben.bencode--functions","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str","title":"Functions"},{"location":"api/#pyben.bencode.bencode_bytes","text":"Encode bytes. Parameters: Name Type Description Default bits `bytes` Bytes treated as a byte-string literal. required Returns: Type Description Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Parameters ---------- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits","title":"bencode_bytes()"},{"location":"api/#pyben.bencode.bencode_dict","text":"Encode dictionary and contents. Parameters: Name Type Description Default dic `dict` Any dictionary containing items that can be bencoded. required Returns: Type Description Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Parameters ---------- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\"","title":"bencode_dict()"},{"location":"api/#pyben.bencode.bencode_int","text":"Encode integer type. Parameters: Name Type Description Default i `int` Number that needs encoding. required Returns: Type Description Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Parameters ---------- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" )","title":"bencode_int()"},{"location":"api/#pyben.bencode.bencode_list","text":"Encode list and contents. Parameters: Name Type Description Default elems `list` List of items for bencoding. required Returns: Type Description Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Parameters ---------- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr","title":"bencode_list()"},{"location":"api/#pyben.bencode.bencode_str","text":"Encode string literals. Parameters: Name Type Description Default txt `str` Any text string. required Returns: Type Description Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Parameters ---------- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" text = txt . encode ( \"utf-8\" ) size = str ( len ( text )) + \":\" return size . encode ( \"utf-8\" ) + text","title":"bencode_str()"},{"location":"api/#pyben.bencode.bendecode","text":"Decode bencoded data. Parameters: Name Type Description Default bits `bytes` Bencode encoded data. required Exceptions: Type Description `DecodeError` : Malformed data. Returns: Type Description Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Parameters ---------- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits )","title":"bendecode()"},{"location":"api/#pyben.bencode.bendecode_dict","text":"Decode dictionary and it's contents. Parameters: Name Type Description Default bits `bytes` Bencoded dictionary. required Returns: Type Description `dict` Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Parameters ---------- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed","title":"bendecode_dict()"},{"location":"api/#pyben.bencode.bendecode_int","text":"Decode digits. Parameters: Name Type Description Default bits `bytes` Bencoded intiger bytes required Returns: Type Description Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Parameters ---------- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( rb \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"bendecode_int()"},{"location":"api/#pyben.bencode.bendecode_list","text":"Decode list and list contents. Parameters: Name Type Description Default bits `bytes` Bencoded list. required Returns: Type Description Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Parameters ---------- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed","title":"bendecode_list()"},{"location":"api/#pyben.bencode.bendecode_str","text":"Bendecode string types. Parameters: Name Type Description Default units `bytes` Bencoded string. required Returns: Type Description Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Parameters ---------- units : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( rb \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end","title":"bendecode_str()"},{"location":"api/#pyben.bencode.benencode","text":"Encode data with bencoding. Parameters: Name Type Description Default val any Data for encoding. required Exceptions: Type Description `EncodeError` : Cannot interpret data. Returns: Type Description Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Parameters ---------- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) module pyben. exceptions Exceptions used throughout the PyBen Package/Library. Classes DecodeError \u2014 Error occured during decode process. EncodeError \u2014 Error occured during encoding process. FilePathError \u2014 Bad path error.","title":"benencode()"},{"location":"api/#pyben.exceptions","text":"Exceptions used throughout the PyBen Package/Library.","title":"exceptions"},{"location":"api/#pyben.exceptions.DecodeError","text":"Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class DecodeError ( Exception ): \"\"\" Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.EncodeError","text":"Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters: Name Type Description Default val any Value that cause the exception None Source code in pyben\\exceptions.py class EncodeError ( Exception ): \"\"\" Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.FilePathError","text":"Bad path error. Generally raised when the file at the path specified does not exist. Parameters: Name Type Description Default val any Value that cause the exception required Source code in pyben\\exceptions.py class FilePathError ( Exception ): \"\"\"Bad path error. Generally raised when the file at the path specified does not exist. Parameters ---------- val : any Value that cause the exception \"\"\" def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"__init__()"},{"location":"examples/","text":"PyBen Usage Examples PyBen is small bencode encode/decode library, designed to mimic the python standard lib's pickle/json modules. Importing pyben importing the library `>>> import pyben` Example 1 Encode most builtin python data types to a bencoded byte sequence. identical to json and pickle modules. >>> data = [1, \"hello\", 2, [\"world\"], {3: \"!\"}] >>> encoded = pyben.dumps(data) >>> encoded b'li1e5:helloi2el5:worldedi3e1:!ee' Example 2 Write Bencoded python builtin data types to file. Unlike the json and pickle modules, pyben accepts a str or PathLike object as the second argument and automatically open the path in bytes, write mode( 'wb' ), or you can open supply an opened ioStream yourself just like json and pickle. >>> pyben.dump(data, \"path/to/save/filename\") or >>> with open('path/to/save/filename','wb') as binfile: >>> pyben.dump(data, binfile) Example 3 Decode a Bencoded bytes-like object Identical to json and pickle modules. >>> decoded = pyben.loads(encoded) >>> decoded [1, 'hello', 2, ['world'], {3: '!'}] Example 4 Decode the bencoded contents of a file. Mimics the behaviour of the json/pickle library's load method. Pyben accepts Path-Like and path strings as input arguement as well as an opened file buffer. >>> decoded_contents = pyben.load('path/to/save/filename') or >>> decoded_contents = pyben.load(open('path/to/save/filename', 'rb')) >>> decoded_contents [1, 'hello', 2, ['world'], {3: '!'}]","title":"Examples"},{"location":"examples/#pyben-usage-examples","text":"PyBen is small bencode encode/decode library, designed to mimic the python standard lib's pickle/json modules.","title":"PyBen Usage Examples"},{"location":"examples/#importing-pyben","text":"importing the library `>>> import pyben`","title":"Importing pyben"},{"location":"examples/#example-1","text":"Encode most builtin python data types to a bencoded byte sequence. identical to json and pickle modules. >>> data = [1, \"hello\", 2, [\"world\"], {3: \"!\"}] >>> encoded = pyben.dumps(data) >>> encoded b'li1e5:helloi2el5:worldedi3e1:!ee'","title":"Example 1"},{"location":"examples/#example-2","text":"Write Bencoded python builtin data types to file. Unlike the json and pickle modules, pyben accepts a str or PathLike object as the second argument and automatically open the path in bytes, write mode( 'wb' ), or you can open supply an opened ioStream yourself just like json and pickle. >>> pyben.dump(data, \"path/to/save/filename\") or >>> with open('path/to/save/filename','wb') as binfile: >>> pyben.dump(data, binfile)","title":"Example 2"},{"location":"examples/#example-3","text":"Decode a Bencoded bytes-like object Identical to json and pickle modules. >>> decoded = pyben.loads(encoded) >>> decoded [1, 'hello', 2, ['world'], {3: '!'}]","title":"Example 3"},{"location":"examples/#example-4","text":"Decode the bencoded contents of a file. Mimics the behaviour of the json/pickle library's load method. Pyben accepts Path-Like and path strings as input arguement as well as an opened file buffer. >>> decoded_contents = pyben.load('path/to/save/filename') or >>> decoded_contents = pyben.load(open('path/to/save/filename', 'rb')) >>> decoded_contents [1, 'hello', 2, ['world'], {3: '!'}]","title":"Example 4"}]}