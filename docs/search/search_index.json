{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # About page. LICENSE.md # License file. api.md # API Reference ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # About page. LICENSE.md # License file. api.md # API Reference ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"LICENSE/","text":"GNU Lesser General Public License Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below. 0. Additional Definitions As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work. 1. Exception to Section 3 of the GNU GPL You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL. 2. Conveying Modified Versions If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 3. Object Code Incorporating Material from Library Header Files The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document. 4. Combined Works You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 5. Combined Libraries You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 6. Revised Versions of the GNU Lesser General Public License The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"License"},{"location":"LICENSE/#gnu-lesser-general-public-license","text":"Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.","title":"GNU Lesser General Public License"},{"location":"LICENSE/#0-additional-definitions","text":"As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.","title":"0. Additional Definitions"},{"location":"LICENSE/#1-exception-to-section-3-of-the-gnu-gpl","text":"You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.","title":"1. Exception to Section 3 of the GNU GPL"},{"location":"LICENSE/#2-conveying-modified-versions","text":"If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.","title":"2. Conveying Modified Versions"},{"location":"LICENSE/#3-object-code-incorporating-material-from-library-header-files","text":"The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document.","title":"3. Object Code Incorporating Material from Library Header Files"},{"location":"LICENSE/#4-combined-works","text":"You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)","title":"4. Combined Works"},{"location":"LICENSE/#5-combined-libraries","text":"You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.","title":"5. Combined Libraries"},{"location":"LICENSE/#6-revised-versions-of-the-gnu-lesser-general-public-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"6. Revised Versions of the GNU Lesser General Public License"},{"location":"about/","text":"Liquores modum Vestaque iudice sedebat turpe est sit virgineos Lorem markdownum spissa equidem videri proprium nec claro parvoque uterum! Dulcedine desiluit Propoetidas illis contigerant ipsi equidem debere consequar caeno. Argis motis: erepta que in vulgasse quae Thaumantias montano cornua sub genus. Quid in Tecta signa Quam sulphure dominaeque tamen Aede nunc florentis dum dixit Relictis undae exeat, preces quo me celeri inpositum turris Tyrrhenia redolent sub dato flores legit. Falsamque suffundit rapto mortis augur aequora, sit portus probat meam exstat virtus arbore recingunt silet mundi venimus. Hunc sub verba et tibi an novis Ad adverso retro . Te obicit: neque: petit nescit ferali paratis anno. Terga et videntur aeris ereptas namque spretis ipsae. Ego ubi quantaque confessus vexant tumulus metior terris, de flentem, postquam bello posito multorum priores minor. Nocuisse diu retinente agnosse quam armo flumina pectus tactis: petit. Pulcherrimus vulnera mihi sinuatoque radice; pampineae arbor pro, adapertaque mihi increpat! Et fallaci pugnae : una cibus sit senex canescunt magni: obstantis corpus, sic domum. Convivia terram et illius tutela latos. Cereris si hostem faciebat horruerant amari, fallat, collem arcana nec Iliaden tanti qui per dominatur! Causam facta experiar freta. Stillanti maiora o quoque revelli quae, equi esse longum rettulit, omnes loca. Tantoque in atque silentum, Peleus tertia ripis infringere instantem. Is pes caelamina; sed sinat quaerit cum toros poterat, solvit cantu tibi Aphidas aspera falsam ; aura. Si sceleri, summae animosos vocat?","title":"About"},{"location":"about/#liquores-modum","text":"","title":"Liquores modum"},{"location":"about/#vestaque-iudice-sedebat-turpe-est-sit-virgineos","text":"Lorem markdownum spissa equidem videri proprium nec claro parvoque uterum! Dulcedine desiluit Propoetidas illis contigerant ipsi equidem debere consequar caeno. Argis motis: erepta que in vulgasse quae Thaumantias montano cornua sub genus. Quid in Tecta signa Quam sulphure dominaeque tamen Aede nunc florentis dum dixit Relictis undae exeat, preces quo me celeri inpositum turris Tyrrhenia redolent sub dato flores legit. Falsamque suffundit rapto mortis augur aequora, sit portus probat meam exstat virtus arbore recingunt silet mundi venimus.","title":"Vestaque iudice sedebat turpe est sit virgineos"},{"location":"about/#hunc-sub-verba-et-tibi-an-novis","text":"Ad adverso retro . Te obicit: neque: petit nescit ferali paratis anno. Terga et videntur aeris ereptas namque spretis ipsae. Ego ubi quantaque confessus vexant tumulus metior terris, de flentem, postquam bello posito multorum priores minor. Nocuisse diu retinente agnosse quam armo flumina pectus tactis: petit. Pulcherrimus vulnera mihi sinuatoque radice; pampineae arbor pro, adapertaque mihi increpat! Et fallaci pugnae : una cibus sit senex canescunt magni: obstantis corpus, sic domum. Convivia terram et illius tutela latos. Cereris si hostem faciebat horruerant amari, fallat, collem arcana nec Iliaden tanti qui per dominatur! Causam facta experiar freta. Stillanti maiora o quoque revelli quae, equi esse longum rettulit, omnes loca. Tantoque in atque silentum, Peleus tertia ripis infringere instantem. Is pes caelamina; sed sinat quaerit cum toros poterat, solvit cantu tibi Aphidas aspera falsam ; aura. Si sceleri, summae animosos vocat?","title":"Hunc sub verba et tibi an novis"},{"location":"api/","text":"API Reference PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent). Modules api classes bencode Classes Bendecoder Benencoder Functions bendecode benencode dump dumps load loads api Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads Usage Examples Encode inline code: >>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True Decode inline code: >>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True dump ( obj , buffer ) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Args: ---- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): with open ( buffer , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) buffer . close () dumps ( obj ) Shortuct function to encoding given obj to bencode encoding. Args obj : any Object to be encoded.py. Returns bytes : Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Args ---- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return benencode ( obj ) load ( buffer ) Load bencoded data from a file of path object and decodes it. Args buffer : str or BytesIO Open and/or read data from file to be decoded. Returns any : (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer ): \"\"\" Load bencoded data from a file of path object and decodes it. Args ---- buffer : `str` or `BytesIO` Open and/or read data from file to be decoded. Returns ------- `any` : (commonly `dict`), Decoded contents of file. \"\"\" if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : with open ( buffer , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) return decoded loads ( encoded ) Shortcut function for decoding encoded data. Args encoded : bytes Bencoded data. Returns any : (commonly dict ), Decoded data. Source code in pyben\\api.py def loads ( encoded ): \"\"\" Shortcut function for decoding encoded data. Args ---- encoded : `bytes` Bencoded data. Returns ------- `any` : (commonly `dict`), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) return decoded bencode API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str bencode_bytes ( bits ) Encode bytes. Args bits : bytes Bytes treated as a byte-string literal. Returns bytes : Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Args ---- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits bencode_dict ( dic ) Encode dictionary and contents. Args dic : dict Any dictionary containing items that can be bencoded. Returns bytes : Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Args ---- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\" bencode_int ( i ) Encode integer type. Args i : int Number that needs encoding. Returns bytes : Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Args ---- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" ) bencode_list ( elems ) Encode list and contents. Args elems : list List of items for bencoding. Returns bytes : Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Args ---- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr bencode_str ( txt ) Encode string literals. Args txt : str Any text string. Returns bytes : Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Args ---- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" size = str ( len ( txt )) + \":\" return size . encode ( \"utf-8\" ) + txt . encode ( \"utf-8\" ) bendecode ( bits ) Decode bencoded data. Args bits : bytes Bencode encoded data. Raises DecodeError : Malformed data. Returns any : Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Args ---- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits ) bendecode_dict ( bits ) Decode dictionary and it's contents. Args bits : bytes Bencoded dictionary. Returns dict Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Args ---- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed bendecode_int ( bits ) Decode digits. Args bits : bytes Bencoded intiger bytes Returns int : Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Args ---- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( br \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () bendecode_list ( bits ) Decode list and list contents. Args bits : bytes Bencoded list. Returns list : Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Args ---- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed bendecode_str ( units ) Bendecode string types. Args bits : bytes Bencoded string. Returns str : Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Args ---- bits : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( br \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end benencode ( val ) Encode data with bencoding. Args val : any Data for encoding. Raises EncodeError : Cannot interpret data. Returns bytes : Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Args ---- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) classes OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Bendecoder Decode class contains all decode methods. __init__ ( self , data = None ) special Initialize instance with optional pre compiled data. data : bytes or bytearray (Optional) (default=None) Target data for decoding. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Args: ---- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None decode ( self , data = None ) Decode bencoded data. Args bits : bytes bencoded data for decoding. Returns any : the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Args ---- bits : ``bytes`` bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded load ( item ) classmethod Extract contents from path/path-like and return Decoded data. Args path : str or path-like Path containing bencoded data. Raises FilePathError : Incorrect path or IOBuffer doesnt exist. Returns any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Args ---- path : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) loads ( data ) classmethod Shortcut to Decode raw bencoded data. Args data : bytes or bytearray Bendencoded bytes . Returns any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Args ---- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. __init__ ( self , data = None ) special Initialize Benencoder insance with optional pre compiled data. data : any (Optional) Target data for encoding. Defaults to None. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Args: ---- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None dump ( data , path ) classmethod Shortcut Classmethod for encoding data and writing to file. Args data : any Raw data to be encoded, usually dict.txt path : path-like or BytesIO Where encoded data should be written to.py Returns bool : Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut Classmethod for encoding data and writing to file. Args ---- data : any Raw data to be encoded, usually dict.txt path : path-like or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True dumps ( data ) classmethod Shortcut method for encoding data and immediately returning it. Args data : any Raw data to be encoded usually a dictionary. Returns bytes : Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Args ---- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () encode ( self , val = None ) Encode data provided as an arguement or provided at initialization. Args val : any, optional Data for encoding. Defaults to None. Returns bytes : encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Args ---- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded exceptions Exceptions used throughout the PyBen Package/Library. DecodeError ( Exception ) Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. val : any Value that cause the exception __init__ ( self , val = None ) special Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) EncodeError ( Exception ) Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. val : any Value that cause the exception __init__ ( self , val = None ) special Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) FilePathError ( Exception ) Bad path error. Generally raised when the file at the path specified does not exist. val : any Value that cause the exception __init__ ( self , obj = None ) special Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg ) Bencode utility library. Features simple API inspired by json and pickle modules in stdlib. Functions dump dumps load loads Usage Examples Encode inline code: >>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee' Encode to file: >>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True Decode inline code: >>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True Decode from file: >>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True dump ( obj , buffer ) Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Args: ---- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): with open ( buffer , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) buffer . close () dumps ( obj ) Shortuct function to encoding given obj to bencode encoding. Args obj : any Object to be encoded.py. Returns bytes : Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Args ---- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return benencode ( obj ) load ( buffer ) Load bencoded data from a file of path object and decodes it. Args buffer : str or BytesIO Open and/or read data from file to be decoded. Returns any : (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer ): \"\"\" Load bencoded data from a file of path object and decodes it. Args ---- buffer : `str` or `BytesIO` Open and/or read data from file to be decoded. Returns ------- `any` : (commonly `dict`), Decoded contents of file. \"\"\" if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : with open ( buffer , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) return decoded loads ( encoded ) Shortcut function for decoding encoded data. Args encoded : bytes Bencoded data. Returns any : (commonly dict ), Decoded data. Source code in pyben\\api.py def loads ( encoded ): \"\"\" Shortcut function for decoding encoded data. Args ---- encoded : `bytes` Bencoded data. Returns ------- `any` : (commonly `dict`), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) return decoded OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use. Classes Bendecoder Benencoder Bendecoder Decode class contains all decode methods. __init__ ( self , data = None ) special Initialize instance with optional pre compiled data. data : bytes or bytearray (Optional) (default=None) Target data for decoding. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Args: ---- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None decode ( self , data = None ) Decode bencoded data. Args bits : bytes bencoded data for decoding. Returns any : the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Args ---- bits : ``bytes`` bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded load ( item ) classmethod Extract contents from path/path-like and return Decoded data. Args path : str or path-like Path containing bencoded data. Raises FilePathError : Incorrect path or IOBuffer doesnt exist. Returns any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Args ---- path : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data ) loads ( data ) classmethod Shortcut to Decode raw bencoded data. Args data : bytes or bytearray Bendencoded bytes . Returns any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Args ---- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data ) Benencoder Encoder for bencode encoding used for Bittorrent meta-files. __init__ ( self , data = None ) special Initialize Benencoder insance with optional pre compiled data. data : any (Optional) Target data for encoding. Defaults to None. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Args: ---- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None dump ( data , path ) classmethod Shortcut Classmethod for encoding data and writing to file. Args data : any Raw data to be encoded, usually dict.txt path : path-like or BytesIO Where encoded data should be written to.py Returns bool : Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut Classmethod for encoding data and writing to file. Args ---- data : any Raw data to be encoded, usually dict.txt path : path-like or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True dumps ( data ) classmethod Shortcut method for encoding data and immediately returning it. Args data : any Raw data to be encoded usually a dictionary. Returns bytes : Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Args ---- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode () encode ( self , val = None ) Encode data provided as an arguement or provided at initialization. Args val : any, optional Data for encoding. Defaults to None. Returns bytes : encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Args ---- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded API helper functions for decoding and encoding data with bencode format. Functions bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str bencode_bytes ( bits ) Encode bytes. Args bits : bytes Bytes treated as a byte-string literal. Returns bytes : Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Args ---- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits bencode_dict ( dic ) Encode dictionary and contents. Args dic : dict Any dictionary containing items that can be bencoded. Returns bytes : Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Args ---- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\" bencode_int ( i ) Encode integer type. Args i : int Number that needs encoding. Returns bytes : Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Args ---- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" ) bencode_list ( elems ) Encode list and contents. Args elems : list List of items for bencoding. Returns bytes : Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Args ---- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr bencode_str ( txt ) Encode string literals. Args txt : str Any text string. Returns bytes : Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Args ---- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" size = str ( len ( txt )) + \":\" return size . encode ( \"utf-8\" ) + txt . encode ( \"utf-8\" ) bendecode ( bits ) Decode bencoded data. Args bits : bytes Bencode encoded data. Raises DecodeError : Malformed data. Returns any : Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Args ---- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits ) bendecode_dict ( bits ) Decode dictionary and it's contents. Args bits : bytes Bencoded dictionary. Returns dict Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Args ---- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed bendecode_int ( bits ) Decode digits. Args bits : bytes Bencoded intiger bytes Returns int : Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Args ---- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( br \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end () bendecode_list ( bits ) Decode list and list contents. Args bits : bytes Bencoded list. Returns list : Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Args ---- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed bendecode_str ( units ) Bendecode string types. Args bits : bytes Bencoded string. Returns str : Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Args ---- bits : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( br \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end benencode ( val ) Encode data with bencoding. Args val : any Data for encoding. Raises EncodeError : Cannot interpret data. Returns bytes : Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Args ---- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) Exceptions used throughout the PyBen Package/Library. DecodeError ( Exception ) Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. val : any Value that cause the exception __init__ ( self , val = None ) special Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) EncodeError ( Exception ) Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. val : any Value that cause the exception __init__ ( self , val = None ) special Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg ) FilePathError ( Exception ) Bad path error. Generally raised when the file at the path specified does not exist. val : any Value that cause the exception __init__ ( self , obj = None ) special Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"API"},{"location":"api/#api-reference","text":"PyBen is a library for decoding/encoding data, with the bencode specification. Bencode is commonly used for encoding Bittorrent Protocol Metafiles (.torrent).","title":"API Reference"},{"location":"api/#pyben--modules","text":"api classes bencode","title":"Modules"},{"location":"api/#pyben--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben--functions","text":"bendecode benencode dump dumps load loads","title":"Functions"},{"location":"api/#pyben.api","text":"","title":"api"},{"location":"api/#pyben.api--bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#pyben.api--functions","text":"dump dumps load loads","title":"Functions"},{"location":"api/#pyben.api--usage-examples","text":"","title":"Usage Examples"},{"location":"api/#pyben.api--encode-inline-code","text":">>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#pyben.api--encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True","title":"Encode to file:"},{"location":"api/#pyben.api--decode-inline-code","text":">>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True","title":"Decode inline code:"},{"location":"api/#pyben.api--decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True","title":"Decode from file:"},{"location":"api/#pyben.api.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Args: ---- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): with open ( buffer , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) buffer . close ()","title":"dump()"},{"location":"api/#pyben.api.dumps","text":"Shortuct function to encoding given obj to bencode encoding.","title":"dumps()"},{"location":"api/#pyben.api.dumps--args","text":"obj : any Object to be encoded.py.","title":"Args"},{"location":"api/#pyben.api.dumps--returns","text":"bytes : Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Args ---- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return benencode ( obj )","title":"Returns"},{"location":"api/#pyben.api.load","text":"Load bencoded data from a file of path object and decodes it.","title":"load()"},{"location":"api/#pyben.api.load--args","text":"buffer : str or BytesIO Open and/or read data from file to be decoded.","title":"Args"},{"location":"api/#pyben.api.load--returns","text":"any : (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer ): \"\"\" Load bencoded data from a file of path object and decodes it. Args ---- buffer : `str` or `BytesIO` Open and/or read data from file to be decoded. Returns ------- `any` : (commonly `dict`), Decoded contents of file. \"\"\" if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : with open ( buffer , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) return decoded","title":"Returns"},{"location":"api/#pyben.api.loads","text":"Shortcut function for decoding encoded data.","title":"loads()"},{"location":"api/#pyben.api.loads--args","text":"encoded : bytes Bencoded data.","title":"Args"},{"location":"api/#pyben.api.loads--returns","text":"any : (commonly dict ), Decoded data. Source code in pyben\\api.py def loads ( encoded ): \"\"\" Shortcut function for decoding encoded data. Args ---- encoded : `bytes` Bencoded data. Returns ------- `any` : (commonly `dict`), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) return decoded","title":"Returns"},{"location":"api/#pyben.bencode","text":"API helper functions for decoding and encoding data with bencode format.","title":"bencode"},{"location":"api/#pyben.bencode--functions","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str","title":"Functions"},{"location":"api/#pyben.bencode.bencode_bytes","text":"Encode bytes.","title":"bencode_bytes()"},{"location":"api/#pyben.bencode.bencode_bytes--args","text":"bits : bytes Bytes treated as a byte-string literal.","title":"Args"},{"location":"api/#pyben.bencode.bencode_bytes--returns","text":"bytes : Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Args ---- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits","title":"Returns"},{"location":"api/#pyben.bencode.bencode_dict","text":"Encode dictionary and contents.","title":"bencode_dict()"},{"location":"api/#pyben.bencode.bencode_dict--args","text":"dic : dict Any dictionary containing items that can be bencoded.","title":"Args"},{"location":"api/#pyben.bencode.bencode_dict--returns","text":"bytes : Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Args ---- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\"","title":"Returns"},{"location":"api/#pyben.bencode.bencode_int","text":"Encode integer type.","title":"bencode_int()"},{"location":"api/#pyben.bencode.bencode_int--args","text":"i : int Number that needs encoding.","title":"Args"},{"location":"api/#pyben.bencode.bencode_int--returns","text":"bytes : Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Args ---- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" )","title":"Returns"},{"location":"api/#pyben.bencode.bencode_list","text":"Encode list and contents.","title":"bencode_list()"},{"location":"api/#pyben.bencode.bencode_list--args","text":"elems : list List of items for bencoding.","title":"Args"},{"location":"api/#pyben.bencode.bencode_list--returns","text":"bytes : Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Args ---- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr","title":"Returns"},{"location":"api/#pyben.bencode.bencode_str","text":"Encode string literals.","title":"bencode_str()"},{"location":"api/#pyben.bencode.bencode_str--args","text":"txt : str Any text string.","title":"Args"},{"location":"api/#pyben.bencode.bencode_str--returns","text":"bytes : Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Args ---- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" size = str ( len ( txt )) + \":\" return size . encode ( \"utf-8\" ) + txt . encode ( \"utf-8\" )","title":"Returns"},{"location":"api/#pyben.bencode.bendecode","text":"Decode bencoded data.","title":"bendecode()"},{"location":"api/#pyben.bencode.bendecode--args","text":"bits : bytes Bencode encoded data.","title":"Args"},{"location":"api/#pyben.bencode.bendecode--raises","text":"DecodeError : Malformed data.","title":"Raises"},{"location":"api/#pyben.bencode.bendecode--returns","text":"any : Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Args ---- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits )","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_dict","text":"Decode dictionary and it's contents.","title":"bendecode_dict()"},{"location":"api/#pyben.bencode.bendecode_dict--args","text":"bits : bytes Bencoded dictionary.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_dict--returns","text":"dict Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Args ---- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_int","text":"Decode digits.","title":"bendecode_int()"},{"location":"api/#pyben.bencode.bendecode_int--args","text":"bits : bytes Bencoded intiger bytes","title":"Args"},{"location":"api/#pyben.bencode.bendecode_int--returns","text":"int : Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Args ---- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( br \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_list","text":"Decode list and list contents.","title":"bendecode_list()"},{"location":"api/#pyben.bencode.bendecode_list--args","text":"bits : bytes Bencoded list.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_list--returns","text":"list : Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Args ---- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_str","text":"Bendecode string types.","title":"bendecode_str()"},{"location":"api/#pyben.bencode.bendecode_str--args","text":"bits : bytes Bencoded string.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_str--returns","text":"str : Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Args ---- bits : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( br \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end","title":"Returns"},{"location":"api/#pyben.bencode.benencode","text":"Encode data with bencoding.","title":"benencode()"},{"location":"api/#pyben.bencode.benencode--args","text":"val : any Data for encoding.","title":"Args"},{"location":"api/#pyben.bencode.benencode--raises","text":"EncodeError : Cannot interpret data.","title":"Raises"},{"location":"api/#pyben.bencode.benencode--returns","text":"bytes : Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Args ---- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val )","title":"Returns"},{"location":"api/#pyben.classes","text":"OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"classes"},{"location":"api/#pyben.classes--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben.classes.Bendecoder","text":"Decode class contains all decode methods.","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. data : bytes or bytearray (Optional) (default=None) Target data for decoding. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Args: ---- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data.","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.decode--args","text":"bits : bytes bencoded data for decoding.","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.decode--returns","text":"any : the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Args ---- bits : ``bytes`` bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded","title":"Returns"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data.","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.load--args","text":"path : str or path-like Path containing bencoded data.","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.load--raises","text":"FilePathError : Incorrect path or IOBuffer doesnt exist.","title":"Raises"},{"location":"api/#pyben.classes.Bendecoder.load--returns","text":"any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Args ---- path : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data )","title":"Returns"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data.","title":"loads()"},{"location":"api/#pyben.classes.Bendecoder.loads--args","text":"data : bytes or bytearray Bendencoded bytes .","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.loads--returns","text":"any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Args ---- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data )","title":"Returns"},{"location":"api/#pyben.classes.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files.","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Initialize Benencoder insance with optional pre compiled data. data : any (Optional) Target data for encoding. Defaults to None. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Args: ---- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut Classmethod for encoding data and writing to file.","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dump--args","text":"data : any Raw data to be encoded, usually dict.txt path : path-like or BytesIO Where encoded data should be written to.py","title":"Args"},{"location":"api/#pyben.classes.Benencoder.dump--returns","text":"bool : Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut Classmethod for encoding data and writing to file. Args ---- data : any Raw data to be encoded, usually dict.txt path : path-like or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True","title":"Returns"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it.","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.dumps--args","text":"data : any Raw data to be encoded usually a dictionary.","title":"Args"},{"location":"api/#pyben.classes.Benencoder.dumps--returns","text":"bytes : Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Args ---- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode ()","title":"Returns"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization.","title":"encode()"},{"location":"api/#pyben.classes.Benencoder.encode--args","text":"val : any, optional Data for encoding. Defaults to None.","title":"Args"},{"location":"api/#pyben.classes.Benencoder.encode--returns","text":"bytes : encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Args ---- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded","title":"Returns"},{"location":"api/#pyben.exceptions","text":"Exceptions used throughout the PyBen Package/Library.","title":"exceptions"},{"location":"api/#pyben.exceptions.DecodeError","text":"Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. val : any Value that cause the exception","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.EncodeError","text":"Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. val : any Value that cause the exception","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.FilePathError","text":"Bad path error. Generally raised when the file at the path specified does not exist. val : any Value that cause the exception","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.api--bencode-utility-library","text":"Features simple API inspired by json and pickle modules in stdlib.","title":"Bencode utility library."},{"location":"api/#pyben.api--functions","text":"dump dumps load loads","title":"Functions"},{"location":"api/#pyben.api--usage-examples","text":"","title":"Usage Examples"},{"location":"api/#pyben.api--encode-inline-code","text":">>> import os >>> import pyben >>> data = {\"item1\": [\"item2\", 3, [4], {5: \"item6\"}]} >>> encoded = pyben.dumps(data) >>> encoded ... b'd5:item1l5:item2i3eli4eedi5e5:item6eee'","title":"Encode inline code:"},{"location":"api/#pyben.api--encode-to-file","text":">>> fd = \"path/to/file\" >>> pyben.dump(data, fd) >>> os.path.exists(fd) ... True >>> encoded_file = open(fd, \"rb\").read() >>> encoded_file == encoded ... True","title":"Encode to file:"},{"location":"api/#pyben.api--decode-inline-code","text":">>> decoded = pybem.loads(encoded) >>> decoded ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded == data ... True","title":"Decode inline code:"},{"location":"api/#pyben.api--decode-from-file","text":">>> decoded_file = pyben.load(fd) >>> decoded_file ... {'item1': ['item2', 3, [4], {5: 'item6'}]} >>> decoded_file == data ... True","title":"Decode from file:"},{"location":"api/#pyben.api.dump","text":"Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. obj : any Data to be encoded. buffer : str or BytesIO File of path-like to write the data to. Source code in pyben\\api.py def dump ( obj , buffer ): \"\"\" Shortcut function for bencode encode data and write to file. Works effectively the same as it's json equivelant except also accepts a path as well as an open fileIO. Args: ---- obj : any Data to be encoded. buffer : `str` or `BytesIO` File of path-like to write the data to. \"\"\" encoded = benencode ( obj ) if not hasattr ( buffer , \"write\" ): with open ( buffer , \"wb\" ) as _fd : _fd . write ( encoded ) else : buffer . write ( encoded ) buffer . close ()","title":"dump()"},{"location":"api/#pyben.api.dumps","text":"Shortuct function to encoding given obj to bencode encoding.","title":"dumps()"},{"location":"api/#pyben.api.dumps--args","text":"obj : any Object to be encoded.py.","title":"Args"},{"location":"api/#pyben.api.dumps--returns","text":"bytes : Encoded data. Source code in pyben\\api.py def dumps ( obj ): \"\"\" Shortuct function to encoding given obj to bencode encoding. Args ---- obj : `any` Object to be encoded.py. Returns ------- `bytes` : Encoded data. \"\"\" return benencode ( obj )","title":"Returns"},{"location":"api/#pyben.api.load","text":"Load bencoded data from a file of path object and decodes it.","title":"load()"},{"location":"api/#pyben.api.load--args","text":"buffer : str or BytesIO Open and/or read data from file to be decoded.","title":"Args"},{"location":"api/#pyben.api.load--returns","text":"any : (commonly dict ), Decoded contents of file. Source code in pyben\\api.py def load ( buffer ): \"\"\" Load bencoded data from a file of path object and decodes it. Args ---- buffer : `str` or `BytesIO` Open and/or read data from file to be decoded. Returns ------- `any` : (commonly `dict`), Decoded contents of file. \"\"\" if hasattr ( buffer , \"read\" ): decoded , _ = bendecode ( buffer . read ()) else : with open ( buffer , \"rb\" ) as _fd : decoded , _ = bendecode ( _fd . read ()) return decoded","title":"Returns"},{"location":"api/#pyben.api.loads","text":"Shortcut function for decoding encoded data.","title":"loads()"},{"location":"api/#pyben.api.loads--args","text":"encoded : bytes Bencoded data.","title":"Args"},{"location":"api/#pyben.api.loads--returns","text":"any : (commonly dict ), Decoded data. Source code in pyben\\api.py def loads ( encoded ): \"\"\" Shortcut function for decoding encoded data. Args ---- encoded : `bytes` Bencoded data. Returns ------- `any` : (commonly `dict`), Decoded data. \"\"\" decoded , _ = bendecode ( encoded ) return decoded OOP implementation of bencode decoders and encoders. This style is not recommended as it can get bulky. The json-like api from the bencode.py module is much easier to use.","title":"Returns"},{"location":"api/#pyben.classes--classes","text":"Bendecoder Benencoder","title":"Classes"},{"location":"api/#pyben.classes.Bendecoder","text":"Decode class contains all decode methods.","title":"Bendecoder"},{"location":"api/#pyben.classes.Bendecoder.__init__","text":"Initialize instance with optional pre compiled data. data : bytes or bytearray (Optional) (default=None) Target data for decoding. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize instance with optional pre compiled data. Args: ---- data : `bytes` or `bytearray` (Optional) (default=None) Target data for decoding. \"\"\" self . data = data self . decoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Bendecoder.decode","text":"Decode bencoded data.","title":"decode()"},{"location":"api/#pyben.classes.Bendecoder.decode--args","text":"bits : bytes bencoded data for decoding.","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.decode--returns","text":"any : the decoded data. Source code in pyben\\classes.py def decode ( self , data = None ): \"\"\" Decode bencoded data. Args ---- bits : ``bytes`` bencoded data for decoding. Returns ------- any : the decoded data. \"\"\" data = self . data if not data else data self . decoded , _ = self . _decode ( bits = data ) return self . decoded","title":"Returns"},{"location":"api/#pyben.classes.Bendecoder.load","text":"Extract contents from path/path-like and return Decoded data.","title":"load()"},{"location":"api/#pyben.classes.Bendecoder.load--args","text":"path : str or path-like Path containing bencoded data.","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.load--raises","text":"FilePathError : Incorrect path or IOBuffer doesnt exist.","title":"Raises"},{"location":"api/#pyben.classes.Bendecoder.load--returns","text":"any Decoded contents of file, Usually a dictionary. Source code in pyben\\classes.py @classmethod def load ( cls , item ): \"\"\" Extract contents from path/path-like and return Decoded data. Args ---- path : `str` or `path-like` Path containing bencoded data. Raises ------ `FilePathError`: Incorrect path or IOBuffer doesnt exist. Returns ------- any Decoded contents of file, Usually a dictionary. \"\"\" decoder = cls () if hasattr ( item , \"read\" ): data = item . read () elif os . path . exists ( item ) and os . path . isfile ( item ): with open ( item , \"rb\" ) as _fd : data = _fd . read () return decoder . decode ( data )","title":"Returns"},{"location":"api/#pyben.classes.Bendecoder.loads","text":"Shortcut to Decode raw bencoded data.","title":"loads()"},{"location":"api/#pyben.classes.Bendecoder.loads--args","text":"data : bytes or bytearray Bendencoded bytes .","title":"Args"},{"location":"api/#pyben.classes.Bendecoder.loads--returns","text":"any Decoded data usually a dictionary. Source code in pyben\\classes.py @classmethod def loads ( cls , data ): \"\"\" Shortcut to Decode raw bencoded data. Args ---- data : ``bytes`` or `bytearray` Bendencoded `bytes`. Returns ------- any Decoded data usually a dictionary. \"\"\" decoder = cls () return decoder . decode ( data )","title":"Returns"},{"location":"api/#pyben.classes.Benencoder","text":"Encoder for bencode encoding used for Bittorrent meta-files.","title":"Benencoder"},{"location":"api/#pyben.classes.Benencoder.__init__","text":"Initialize Benencoder insance with optional pre compiled data. data : any (Optional) Target data for encoding. Defaults to None. Source code in pyben\\classes.py def __init__ ( self , data = None ): \"\"\" Initialize Benencoder insance with optional pre compiled data. Args: ---- data : any (Optional) Target data for encoding. Defaults to None. \"\"\" self . data = data self . encoded = None","title":"__init__()"},{"location":"api/#pyben.classes.Benencoder.dump","text":"Shortcut Classmethod for encoding data and writing to file.","title":"dump()"},{"location":"api/#pyben.classes.Benencoder.dump--args","text":"data : any Raw data to be encoded, usually dict.txt path : path-like or BytesIO Where encoded data should be written to.py","title":"Args"},{"location":"api/#pyben.classes.Benencoder.dump--returns","text":"bool : Return True if success.txt Source code in pyben\\classes.py @classmethod def dump ( cls , data , path ): \"\"\" Shortcut Classmethod for encoding data and writing to file. Args ---- data : any Raw data to be encoded, usually dict.txt path : path-like or `BytesIO` Where encoded data should be written to.py Returns ------- `bool` : Return True if success.txt \"\"\" encoded = cls ( data ) . encode () if hasattr ( path , \"write\" ): path . write ( encoded ) else : with open ( path , \"wb\" ) as _fd : _fd . write ( encoded ) return True","title":"Returns"},{"location":"api/#pyben.classes.Benencoder.dumps","text":"Shortcut method for encoding data and immediately returning it.","title":"dumps()"},{"location":"api/#pyben.classes.Benencoder.dumps--args","text":"data : any Raw data to be encoded usually a dictionary.","title":"Args"},{"location":"api/#pyben.classes.Benencoder.dumps--returns","text":"bytes : Encoded data. Source code in pyben\\classes.py @classmethod def dumps ( cls , data ): \"\"\" Shortcut method for encoding data and immediately returning it. Args ---- data : any Raw data to be encoded usually a dictionary. Returns ------- `bytes`: Encoded data. \"\"\" return cls ( data ) . encode ()","title":"Returns"},{"location":"api/#pyben.classes.Benencoder.encode","text":"Encode data provided as an arguement or provided at initialization.","title":"encode()"},{"location":"api/#pyben.classes.Benencoder.encode--args","text":"val : any, optional Data for encoding. Defaults to None.","title":"Args"},{"location":"api/#pyben.classes.Benencoder.encode--returns","text":"bytes : encoded data Source code in pyben\\classes.py def encode ( self , val = None ): \"\"\" Encode data provided as an arguement or provided at initialization. Args ---- val : any, optional Data for encoding. Defaults to None. Returns ------- `bytes` : encoded data \"\"\" if val is None : val = self . data self . encoded = self . _encode ( val ) return self . encoded API helper functions for decoding and encoding data with bencode format.","title":"Returns"},{"location":"api/#pyben.bencode--functions","text":"bendecode bendecode_dict bendecode_int bendecode_list bendecode_str benencode bencode_bytes bencode_dict bencode_int bencode_list bencode_str","title":"Functions"},{"location":"api/#pyben.bencode.bencode_bytes","text":"Encode bytes.","title":"bencode_bytes()"},{"location":"api/#pyben.bencode.bencode_bytes--args","text":"bits : bytes Bytes treated as a byte-string literal.","title":"Args"},{"location":"api/#pyben.bencode.bencode_bytes--returns","text":"bytes : Bencode encoded byte string literal. Source code in pyben\\bencode.py def bencode_bytes ( bits ): \"\"\" Encode bytes. Args ---- bits : `bytes` Bytes treated as a byte-string literal. Returns ------- `bytes`: Bencode encoded byte string literal. \"\"\" size = str ( len ( bits )) + \":\" return size . encode ( \"utf-8\" ) + bits","title":"Returns"},{"location":"api/#pyben.bencode.bencode_dict","text":"Encode dictionary and contents.","title":"bencode_dict()"},{"location":"api/#pyben.bencode.bencode_dict--args","text":"dic : dict Any dictionary containing items that can be bencoded.","title":"Args"},{"location":"api/#pyben.bencode.bencode_dict--returns","text":"bytes : Bencoded key, value pairs of data. Source code in pyben\\bencode.py def bencode_dict ( dic ): \"\"\" Encode dictionary and contents. Args ---- dic : `dict` Any dictionary containing items that can be bencoded. Returns ------- `bytes` : Bencoded key, value pairs of data. \"\"\" result = b \"d\" for key , val in dic . items (): result += b \"\" . join ([ benencode ( key ), benencode ( val )]) return result + b \"e\"","title":"Returns"},{"location":"api/#pyben.bencode.bencode_int","text":"Encode integer type.","title":"bencode_int()"},{"location":"api/#pyben.bencode.bencode_int--args","text":"i : int Number that needs encoding.","title":"Args"},{"location":"api/#pyben.bencode.bencode_int--returns","text":"bytes : Bencoded Integer. Source code in pyben\\bencode.py def bencode_int ( i ): \"\"\" Encode integer type. Args ---- i : `int` Number that needs encoding. Returns ------- `bytes` : Bencoded Integer. \"\"\" return ( \"i\" + str ( i ) + \"e\" ) . encode ( \"utf-8\" )","title":"Returns"},{"location":"api/#pyben.bencode.bencode_list","text":"Encode list and contents.","title":"bencode_list()"},{"location":"api/#pyben.bencode.bencode_list--args","text":"elems : list List of items for bencoding.","title":"Args"},{"location":"api/#pyben.bencode.bencode_list--returns","text":"bytes : Bencoded list and contents. Source code in pyben\\bencode.py def bencode_list ( elems ): \"\"\" Encode list and contents. Args ---- elems : `list` List of items for bencoding. Returns ------- `bytes` : Bencoded list and contents. \"\"\" arr = bytearray ( \"l\" , encoding = \"utf-8\" ) for elem in elems : encoded = benencode ( elem ) arr . extend ( encoded ) arr . extend ( b \"e\" ) return arr","title":"Returns"},{"location":"api/#pyben.bencode.bencode_str","text":"Encode string literals.","title":"bencode_str()"},{"location":"api/#pyben.bencode.bencode_str--args","text":"txt : str Any text string.","title":"Args"},{"location":"api/#pyben.bencode.bencode_str--returns","text":"bytes : Bencoded string literal. Source code in pyben\\bencode.py def bencode_str ( txt ): \"\"\" Encode string literals. Args ---- txt : `str` Any text string. Returns ------- `bytes` : Bencoded string literal. \"\"\" size = str ( len ( txt )) + \":\" return size . encode ( \"utf-8\" ) + txt . encode ( \"utf-8\" )","title":"Returns"},{"location":"api/#pyben.bencode.bendecode","text":"Decode bencoded data.","title":"bendecode()"},{"location":"api/#pyben.bencode.bendecode--args","text":"bits : bytes Bencode encoded data.","title":"Args"},{"location":"api/#pyben.bencode.bendecode--raises","text":"DecodeError : Malformed data.","title":"Raises"},{"location":"api/#pyben.bencode.bendecode--returns","text":"any : Bencode decoded data. Source code in pyben\\bencode.py def bendecode ( bits ): \"\"\" Decode bencoded data. Args ---- bits : `bytes` Bencode encoded data. Raises ------ `DecodeError` : Malformed data. Returns ------- any : Bencode decoded data. \"\"\" if bits . startswith ( b \"i\" ): match , feed = bendecode_int ( bits ) return match , feed if chr ( bits [ 0 ]) . isdigit (): match , feed = bendecode_str ( bits ) return match , feed if bits . startswith ( b \"l\" ): lst , feed = bendecode_list ( bits ) return lst , feed if bits . startswith ( b \"d\" ): dic , feed = bendecode_dict ( bits ) return dic , feed raise DecodeError ( bits )","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_dict","text":"Decode dictionary and it's contents.","title":"bendecode_dict()"},{"location":"api/#pyben.bencode.bendecode_dict--args","text":"bits : bytes Bencoded dictionary.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_dict--returns","text":"dict Decoded dictionary and contents Source code in pyben\\bencode.py def bendecode_dict ( bits ): \"\"\" Decode dictionary and it's contents. Args ---- bits : `bytes` Bencoded dictionary. Returns ------- `dict` Decoded dictionary and contents \"\"\" dic , feed = {}, 1 while not bits [ feed :] . startswith ( b \"e\" ): match1 , rest = bendecode ( bits [ feed :]) feed += rest match2 , rest = bendecode ( bits [ feed :]) feed += rest dic [ match1 ] = match2 feed += 1 return dic , feed","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_int","text":"Decode digits.","title":"bendecode_int()"},{"location":"api/#pyben.bencode.bendecode_int--args","text":"bits : bytes Bencoded intiger bytes","title":"Args"},{"location":"api/#pyben.bencode.bendecode_int--returns","text":"int : Decoded int value. Source code in pyben\\bencode.py def bendecode_int ( bits ): \"\"\" Decode digits. Args ---- bits : `bytes` Bencoded intiger bytes Returns ------- `int` : Decoded int value. \"\"\" obj = re . match ( br \"i(-?\\d+)e\" , bits ) return int ( obj . group ( 1 )), obj . end ()","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_list","text":"Decode list and list contents.","title":"bendecode_list()"},{"location":"api/#pyben.bencode.bendecode_list--args","text":"bits : bytes Bencoded list.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_list--returns","text":"list : Bencode decoded list and contents. Source code in pyben\\bencode.py def bendecode_list ( bits ): \"\"\" Decode list and list contents. Args ---- bits : `bytes` Bencoded list. Returns ------- `list` : Bencode decoded list and contents. \"\"\" lst , feed = [], 1 while not bits [ feed :] . startswith ( b \"e\" ): match , rest = bendecode ( bits [ feed :]) lst . append ( match ) feed += rest feed += 1 return lst , feed","title":"Returns"},{"location":"api/#pyben.bencode.bendecode_str","text":"Bendecode string types.","title":"bendecode_str()"},{"location":"api/#pyben.bencode.bendecode_str--args","text":"bits : bytes Bencoded string.","title":"Args"},{"location":"api/#pyben.bencode.bendecode_str--returns","text":"str : Decoded data string. Source code in pyben\\bencode.py def bendecode_str ( units ): \"\"\" Bendecode string types. Args ---- bits : `bytes` Bencoded string. Returns ------- `str` : Decoded data string. \"\"\" match = re . match ( br \"(\\d+):\" , units ) word_len , start = int ( match . groups ()[ 0 ]), match . span ()[ 1 ] end = start + word_len text = units [ start : end ] try : text = text . decode ( \"utf-8\" ) except UnicodeDecodeError : pass return text , end","title":"Returns"},{"location":"api/#pyben.bencode.benencode","text":"Encode data with bencoding.","title":"benencode()"},{"location":"api/#pyben.bencode.benencode--args","text":"val : any Data for encoding.","title":"Args"},{"location":"api/#pyben.bencode.benencode--raises","text":"EncodeError : Cannot interpret data.","title":"Raises"},{"location":"api/#pyben.bencode.benencode--returns","text":"bytes : Bencoded data. Source code in pyben\\bencode.py def benencode ( val ): \"\"\" Encode data with bencoding. Args ---- val : any Data for encoding. Raises ------ `EncodeError` : Cannot interpret data. Returns ------- `bytes` : Bencoded data. \"\"\" if isinstance ( val , str ): return bencode_str ( val ) if isinstance ( val , int ): return bencode_int ( val ) if isinstance ( val , list ): return bencode_list ( val ) if isinstance ( val , dict ): return bencode_dict ( val ) if hasattr ( val , \"hex\" ): return bencode_bytes ( val ) if isinstance ( val , tuple ): return bencode_list ( list ( val )) raise EncodeError ( val ) Exceptions used throughout the PyBen Package/Library.","title":"Returns"},{"location":"api/#pyben.exceptions.DecodeError","text":"Error occured during decode process. Raised when attempting to decode an incompatible bytearray. Mostly it indicates the object is a hash digest and should remian as a bytes object. val : any Value that cause the exception","title":"DecodeError"},{"location":"api/#pyben.exceptions.DecodeError.__init__","text":"Construct Exception DecodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception DecodeError.\"\"\" msg = f \"Decoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.EncodeError","text":"Error occured during encoding process. Raised when attempting to bencode encode an incompatible data type into bencode format. Bencode accepts lists, dicts, strings, integers, and bytes. val : any Value that cause the exception","title":"EncodeError"},{"location":"api/#pyben.exceptions.EncodeError.__init__","text":"Construct Exception EncodeError. Source code in pyben\\exceptions.py def __init__ ( self , val = None ): \"\"\"Construct Exception EncodeError.\"\"\" msg = f \"Encoder is unable to interpret { type ( val ) } type = { str ( val ) } \" super () . __init__ ( msg )","title":"__init__()"},{"location":"api/#pyben.exceptions.FilePathError","text":"Bad path error. Generally raised when the file at the path specified does not exist. val : any Value that cause the exception","title":"FilePathError"},{"location":"api/#pyben.exceptions.FilePathError.__init__","text":"Construct Exception Subclass FilePathError. Source code in pyben\\exceptions.py def __init__ ( self , obj = None ): \"\"\"Construct Exception Subclass FilePathError.\"\"\" msg = f \" { str ( obj ) } doesn't exist or is unavailable.\" super () . __init__ ( msg )","title":"__init__()"}]}